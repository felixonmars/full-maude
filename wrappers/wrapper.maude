load client-server.maude
load my-configuration.maude

fmod EMAP{X :: TRIV, Y :: TRIV} is
  pr MAP{X, Y} .
  pr SET{X} .
  pr SET{Y} .
  
  var X : X$Elt .
  var Y : Y$Elt .
  var M : Map{X, Y} .
  
  op remove : X$Elt Map{X, Y} -> Map{X, Y} .
  eq remove(X, (X |-> Y, M)) = M .
  eq remove(X, M) = M [owise] .

  op domain : Map{X, Y} -> Set{X} .
  eq domain((X |-> Y, M)) = X, domain(M) .
  eq domain(empty) = empty .

  op range : Map{X, Y} -> Set{Y} .
  eq range((X |-> Y, M)) = Y, range(M) .
  eq range(empty) = empty .
endfm

fmod MAYBE{X :: TRIV} is
  sort Maybe{X} .
  subsort X$Elt < Maybe{X} .
  op null : -> Maybe{X} [ctor] .
endfm

fmod COOKIE is
  pr NAT .
  sort Cookie .
  subsort Nat < Cookie .
endfm

view Oid from TRIV to MY-CONFIGURATION is
  sort Elt to Oid .
endv

view Msg from TRIV to MY-CONFIGURATION is
  sort Elt to Msg .
endv

view Cookie from TRIV to COOKIE is
  sort Elt to Cookie .
endv

mod WRAPPER{CS :: CLIENT-SERVER} is
  pr MAP{Oid, Cookie} .
  pr MAYBE{Msg} .
  inc RANDOM .
  inc MY-CONFIGURATION .

  ---- class ClientWrapper | cc : Configuration, conn : Map{Oid, Cookie}, held : Maybe{Msg} . 
  sort ClientWrapper ClientWrapperId . 
  subsort ClientWrapper < Cid .
  subsort ClientWrapperId < Oid .
  op ClientWrapper : -> ClientWrapper [ctor] .
  op cc`:_ : Configuration -> Attribute [ctor] .
  op conn`:_ : Map{Oid, Cookie} -> Attribute [ctor] .
  op held`:_ : Maybe{Msg} -> Attribute [ctor] .
  
  ---- class ServerWrapper |Â sc : Configuration, conn : Map{Oid, Cookie}, seed : Nat .
  sort ServerWrapper ServerWrapperId . 
  subsort ServerWrapper < Cid .
  subsort ServerWrapperId < Oid .
  op ServerWrapper : -> ServerWrapper [ctor] .
  op sc`:_ : Configuration -> Attribute [ctor] .
  op conn`:_ : Map{Oid, Cookie} -> Attribute [ctor] .
  op seed`:_ : Nat -> Attribute [ctor] .
  
  ---- Messages
  sort MsgContents .
  op to_,_from_ : Oid MsgContents Oid -> Msg [ctor] .
  op connect : -> MsgContents [ctor] .
  op [_,_] : Cookie CS$Request -> MsgContents [ctor] . 
  op cookie : Cookie -> MsgContents [ctor] .

  var  C : CS$ClientId .
  var  S : CS$ServerId .
  var  VClient : CS$Client .
  var  VServer : CS$Server .
  var  VClientWrapper : ClientWrapper .
  var  VServerWrapper : ServerWrapper .
  vars O O1 O2 : Oid . 
  vars Atts1 Atts2 : AttributeSet .
  var  Ck : Cookie .
  vars Cks : Map{Oid, Cookie} .
  var  N : Nat .
  var  Conf : Configuration .
  var  Request : CS$Request .
  var  Response : CS$Response .
 
  ---- Rules
  rl [create-conn] : 
    < O : VClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 > (to S, Request from C) Conf), 
        conn : empty, 
        held : null, 
        Atts2 >
    =>
    < O : VClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 > Conf), 
        conn : empty, 
        held : (to S, Request from C), 
        Atts2 >
    (to S, connect from C) .

  rl [add-cookie] : 
    < O : VClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 > (to S, Request from C) Conf), 
        conn : (S |-> Ck), 
        held : null, 
        Atts2 >
    =>
    < O : VClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 > Conf), 
        conn : (S |-> Ck), 
        held : null, 
        Atts2 >
    (to S, [Ck, Request] from C) .

  rl [accept-req] :
    < O : VServerWrapper | 
        sc : (< S : VServer | Atts1 > Conf), 
        seed : N, 
        conn : ((C |-> Ck), Cks), 
        Atts2 >
    (to S, [Ck, Request] from C) 
    =>
    < O : VServerWrapper | 
        sc : (< S : VServer | Atts1 > (to S, Request from C) Conf), 
        seed : N,
        conn : ((C |-> Ck), Cks), 
        Atts2 > .

  rl [insert-response] :
    < O : VClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 > Conf), 
        conn : ((S |-> Ck), Cks), 
        Atts2 >
    (to C, Response from S)
    =>
    < O : VClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 >
             (to C, Response from S) 
              Conf), 
        conn : ((S |-> Ck), Cks), 
        Atts2 > .
  
  crl [connect-to-server] :
    < O : VServerWrapper | 
        sc : (< S : VServer | Atts1 > Conf), 
        seed : N, 
        conn : Cks, 
        Atts2 >
    (to S, connect from C)
    =>
    < O : VServerWrapper | 
        sc : (< S : VServer | Atts1 > Conf), 
        seed : s(N), 
        conn : ((C |-> Ck), Cks), 
        Atts2 >
    (to C, cookie(Ck) from S)
  if Cks[C] = undefined /\ Ck := random(N) .
  
 rl [send-ck-to-client] : 
    < O : ClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 > Conf), 
        conn : empty, 
        held : (to S, Request from C), 
        Atts2 >
    (to C, cookie(Ck) from S)
    =>
    < O : ClientWrapper | 
        cc : (< C : VClient | assoc-serv : S, Atts1 > Conf), 
        conn : (S |-> Ck), 
        held : null, 
        Atts2 >
    (to S, [Ck, Request] from C) .
endm

