th CLIENT-SERVER is
  inc CONFIGURATION .
  
  ---- class Server .   
  sorts Server ServerId .
  subsort Server < Cid .
  subsort ServerId < Oid .
  op Server : -> Server [ctor] .

  ---- class Client | assoc-serv : ServerId  
  sorts Client ClientId .
  subsort Client < Cid .
  subsort ClientId < Oid .
  op Client : -> Client [ctor] .
  op assoc-serv`:_ : Oid -> Attribute [ctor] . 

  ---- Messages
  sorts Request Response .
  op to_,_from_ : ClientId Request ServerId -> Msg [ctor] .
  op to_,_from_ : ServerId Response ClientId -> Msg [ctor] .
  ---- op request : -> Request [ctor] .
  ---- op response : -> Response [ctor] .

  var  C : ClientId .
  var  VClient : Client .
  var  S : ServerId .
  var  VServer : Server .
  var  Atts : AttributeSet .
  var  Request : Request .
  var  Response : Response .
  
  ---- Rules
  rl [req-creation] :
    < C : VClient | assoc-serv : S, Atts >
    => 
    < C : VClient | assoc-serv : S, Atts > 
    ---- (to S, request from C) 
    (to S, Request from C) 
    [nonexec print C " creates msg request to " S] .

  rl [process-req] :
    < S : VServer | Atts >
    ---- (to S, request from C) 
    (to S, Request from C) 
    =>
    < S : VServer | Atts >
    ---- (to C, response from S) 
    (to C, Response from S) 
    [nonexec print S " receives a request and responds to " C] .

  rl [process-resp] :
    < C : VClient | assoc-serv : S, Atts >
    ---- (to C, response from S)
    (to C, Response from S)
    =>
    < C : VClient | assoc-serv : S, Atts > 
    [print C " receives a response from " S] .
endth

