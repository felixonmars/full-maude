  ---- from the book All About Maude
  ---- from the Maude Manual
  ---- by the Maude team + Santiago Escobar

 (mod NARROWING-VENDING-MACHINE is 
    sorts Coin Item Marking Money State . 
    subsort Coin < Money .
    op __ : Money Money -> Money [assoc comm] . 
    subsort Money Item < Marking . 
    op __ : Marking Marking -> Marking [assoc comm] . 
    op <_> : Marking -> State .
    op $ : -> Coin [format (r! o)] . 
    op q : -> Coin [format (r! o)] . 
    op a : -> Item [format (b! o)] . 
    op c : -> Item [format (b! o)] . 

    var M : Marking .
    rl [buy-c] : < $ > => < c > . 
    rl [buy-c] : < M $ > => < M c > . 
    rl [buy-a] : < $ > => < a q > . 
    rl [buy-a] : < M $ > => < M a q > . 
    rl [change]: < q q q q > => < $ > . 
    rl [change]: < M q q q q > => < M $ > . 
  endm)

set trace off .
trace include FULL-MAUDE .
set print conceal on .
print conceal fmod_is_sorts_.____endfm mod_is_sorts_.____endm db __ .

(search [,4] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>* < a c > .)
---(
rewrites: 323693 in 367ms cpu (402ms real) (881152 rewrites/second)
search [,4] in NARROWING-VENDING-MACHINE : < M:Money > ~>* < a c > .

Solution 1
M:Money --> $ q q q

Solution 2
M:Money --> q q q q q q q

No more solutions.
---)

(search [,20] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>* < a c > .)
---(
  Solution 1
  M:Money --> $ q q q

  Solution 2
  M:Money --> q q q q q q q

  No more solutions.
---)

(search [,5] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>! < MO':Money a c > .)
---(
rewrites: 1057707 in 1109ms cpu (1137ms real) (953654 rewrites/second)
search [,5] in NARROWING-VENDING-MACHINE : < M:Money > ~>! < MO':Money a c > .

Solution 1
M:Money --> $ $ ; MO':Money --> q

Solution 2
M:Money --> $ q q q q ; MO':Money --> q

Solution 3
M:Money --> q q q q q q q q ; MO':Money --> q

No more solutions.
---)

(red in META-NARROWING-SEARCH :
            metaNarrowSearch(upModule(NARROWING-VENDING-MACHINE),
              '<_>['MO:Money],
              '<_>['__['a.Item, 'c.Item]],
              none, '*, 4, unbounded) .)
---(
rewrites: 400562 in 1455ms cpu (1555ms real) (275152 rewrites/second)
reduce in META-NARROWING-SEARCH :
  metaNarrowSearch(mod 'NARROWING-VENDING-MACHINE is
  nil
  sorts 'Bool ; 'Coin ; 'Item ; 'Marking ; 'Money ; 'State .
  subsort 'Coin < 'Money .
  subsort 'Item < 'Marking .
  subsort 'Money < 'Marking .
  op '$ : nil -> 'Coin [format('r! 'o)] .
  op '<_> : 'Marking -> 'State [none] .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'false.Bool)
    term-hook('notEqualTerm,'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'true.Bool)
    term-hook('notEqualTerm,'false.Bool))] .
  op '__ : 'Marking 'Marking -> 'Marking [assoc comm] .
  op '__ : 'Money 'Money -> 'Money [assoc comm] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61)gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op 'a : nil -> 'Item [format('b! 'o)] .
  op 'c : nil -> 'Item [format('b! 'o)] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse,nil))] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3 0)special(
    id-hook('BranchSymbol,nil)
    term-hook('1,'true.Bool)
    term-hook('2,'false.Bool))] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 'q : nil -> 'Coin [format('r! 'o)] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue,nil))] .
  none
  eq '_and_['A:Bool,'A:Bool]= 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]]= '_xor_['_and_['A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
  eq '_and_['false.Bool,'A:Bool]= 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool]= 'A:Bool [none] .
  eq '_implies_['A:Bool,'B:Bool]= 'not_['_xor_['A:Bool,'_and_['A:Bool,'B:Bool]]] [none] .
  eq '_or_['A:Bool,'B:Bool]= '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,'B:Bool]] [none] .
  eq '_xor_['A:Bool,'A:Bool]= 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool]= 'A:Bool [none] .
  eq 'not_['A:Bool]= '_xor_['true.Bool,'A:Bool] [none] .
  rl '<_>['$.Coin]=> '<_>['c.Item] [label('buy-c)] .
  rl '<_>['$.Coin]=> '<_>['__['a.Item,'q.Coin]] [label('buy-a)] .
  rl '<_>['__['M:Marking,'$.Coin]]=> '<_>['__['M:Marking,'c.Item]] [label('buy-c)] .
  rl '<_>['__['M:Marking,'$.Coin]]=> '<_>['__['M:Marking,'__['a.Item,'q.Coin]]] [label('buy-a)] .
  rl '<_>['__['M:Marking,'__['q.Coin,'__['q.Coin,'__['q.Coin,'q.Coin]]]]]=> '<_>['__['M:Marking,'$.Coin]] [label(
    'change)] .
  rl '<_>['__['q.Coin,'__['q.Coin,'__['q.Coin,'q.Coin]]]]=> '<_>['$.Coin] [label('change)] .
endm,'<_>['MO:Money],'<_>['__['a.Item,'c.Item]],none,'*,4,unbounded)
result ResultTripleSet :
  {'<_>['__['a.Item,'c.Item]],'State,
    '#1:Marking <- '__['q.Coin,'q.Coin,'q.Coin];
    '#3:Money <- '__['q.Coin,'q.Coin,'q.Coin];
    '#4:Marking <- 'a.Item ;
    '#6:Marking <- 'a.Item ;
    'MO:Money <- '__['$.Coin,'__['q.Coin,'q.Coin,'q.Coin]]}|
{'<_>['__['a.Item,'c.Item]],'State,
    '#1:Marking <- '__['q.Coin,'q.Coin,'q.Coin];
    '#3:Money <- '__['q.Coin,'q.Coin,'q.Coin];
    '#4:Marking <- '__['q.Coin,'q.Coin,'q.Coin];
    '#6:Money <- '__['q.Coin,'q.Coin,'q.Coin];
    '#7:Marking <- 'a.Item ;
    '#9:Marking <- 'a.Item ;
    'MO:Money <- '__['q.Coin,'q.Coin,'q.Coin,'q.Coin,'__['q.Coin,'q.Coin,'q.Coin]]}
---)
