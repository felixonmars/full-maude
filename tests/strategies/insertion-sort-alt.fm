(fmod SORTING-PAIR{X :: TRIV} is
  protecting NAT .
  sort Entry{X} .
  op `[_`,_`] : Nat X$Elt -> Entry{X} [ctor] .
endfm)

(view Entry{X :: TRIV} from TRIV to SORTING-PAIR{X} is
  sort Elt to Entry{X} .
endv)

(mod SORTING is
  protecting SET{Entry{Nat}} .
  vars I J : Nat .
  vars V W : Nat .
  rl [swap] : [J, V], [I, W] => [J, W], [I, V] .
endm)

(smod INSERTION-SORT is
  protecting SORTING .

  strat  swap : Nat Nat @ Set{Entry{Nat}} .
  strats insert insort : Nat @ Set{Entry{Nat}} .

  vars X Y J I : Nat .
  vars V W : Nat .
  var  PS : Set{Entry{Nat}} .

  sd insort(Y) := try(match PS s.t. Y <= | PS | ; ---- size(PS), greatest index?
                      insert(Y) ;
                      insort(Y + 1)) .

  sd insert(1) := idle [label base-case] .
  csd insert(s(X)) := try(xmatch [X, V], [s(X), W] s.t. V > W ;
                          swap(X, s(X)) ;
                          insert(X))
                       if X > 0 [label recursive-case] .

  sd swap(X, Y) := swap[J <- X, I <- Y] .
endsm)

(srewrite [1,8],[2,3],[3,15],[4,5],[5,2] using insort(2) .)
