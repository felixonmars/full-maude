(mod HANOI is
  protecting NAT-LIST .

  sorts Post Hanoi Game .
  subsort Post < Hanoi .

  op `(_`)`[_`] : Nat NatList -> Post [ctor] .
  op empty   : -> Hanoi [ctor] .
  op __      : Hanoi Hanoi -> Hanoi [ctor assoc comm id: empty] .

  vars S T D1 D2 N : Nat .
  vars L1 L2       : NatList .
  vars H H'        : Hanoi .

  crl [move] : (S) [L1 D1] (T) [L2 D2] => (S) [L1] (T) [L2 D2 D1] if D2 > D1 .
  rl  [move] : (S) [L1 D1] (T) [nil]   => (S) [L1] (T) [D1] .
endm)

eof

(select HANOI .)
----(rew (0)[3 2 1] (1)[nil] (2)[nil] .)

(srew [3] in HANOI : (0)[3 2 1] (1)[nil] (2)[nil] using move .)

(srew (0)[nil] (1)[nil] (2)[3 2 1] using match (N:Nat)[3 2 1] H:Hanoi s.t. N:Nat =/= 0 .)

(srew (0)[nil] (1)[nil] (2)[3 2 1] using xmatch (0)[nil] (2)[3 2 1] .)

(srew (0)[nil] (1)[nil] (2)[3 2 1] using match (0)[nil] (2)[3 2 1] .)

(srew (0)[nil] (1)[nil] (2)[3 2 1] using amatch 3 L1:NatList 1 .)

(srew (0)[3 2 1] (1)[nil] (2)[nil] using move ; move .)

(srew (0)[3 2] (1)[1] (2)[nil] using move[S:Nat <- 0] | move[T:Nat <- 0] .)

(srew (0)[3 2 1] (1)[nil] (2)[nil] using move * .)

(srew (0)[3 2 1] using idle .)

(srew (0)[3 2 1] using fail .)

(srew (0)[3 2] (1)[1] (2)[nil] using (move[T:Nat <- 2] ? idle : move) * .)

(srew (0)[3 2 1] (1)[nil] (2)[nil] using move[S:Nat <- 0] ! .)

(srew (0)[3] (1)[1] (2)[2] using test(move[S:Nat <- 0]) .)

(srew (0)[3] (1)[1] (2)[2] using test(move[S:Nat <- 1]) .)

(srew (0)[3 2 1] (1)[nil] (2)[nil] using one(move * ; amatch (2)[3 2 1]) .)

(srew (0)[3 2 1] (1)[nil] (2)[nil] using move * ; amatch (2)[3 2 1] .)

(srew (0)[3 2 1] (1)[nil] (2)[nil] using one(move) * .)
