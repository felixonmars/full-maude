************* Section 16.3 *********************
(mod NARROWING-VENDING-MACHINE is 
   sorts Coin Item Marking Money State . subsort Coin < Money .
   op empty : -> Money .
   op __ : Money Money -> Money [assoc comm id: empty] . 
   subsort Money Item < Marking . 
   op __ : Marking Marking -> Marking [assoc comm id: empty] . 
   op <_> : Marking -> State .
   ops $ q : -> Coin . ops a c : -> Item . var M : Marking .
   rl [buy-c] : < M $ > => < M c > . 
   rl [buy-a] : < M $ > => < M a q > . 
   eq [change]: q q q q = $ [variant] . 
 endm)

(search [1] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>* < a c > .)
***( Output:
Solution 1
M:Money --> $ q q q
)***

(search [,5] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>* < a c > .)
***( Output:
Solution 1
M:Money --> $ q q q
)***

(search [,5] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>! < MO':Money a c > .)
***( Output:
No more solutions
)***

(search [,5] in NARROWING-VENDING-MACHINE : 
            < C1:Coin C2:Coin C3:Coin C4:Coin > ~>! < M:Money a c > .)

***( Output:
Solution 1
C1:Coin --> $ ;
C2:Coin --> q ;
C3:Coin --> q ;
C4:Coin --> q ;
M:Money --> empty

Solution 2
C1:Coin --> q ;
C2:Coin --> $ ;
C3:Coin --> q ;
C4:Coin --> q ;
M:Money --> empty

Solution 3
C1:Coin --> q ;
C2:Coin --> q ;
C3:Coin --> $ ;
C4:Coin --> q ;
M:Money --> empty

Solution 4
C1:Coin --> q ;
C2:Coin --> q ;
C3:Coin --> q ;
C4:Coin --> $ ;
M:Money --> empty
)***

************* Section 16.12.1 *********************
 (mod LAST-APPEND is
    sort Success .
    op success : -> Success .
    sort Nat .
    op 0 : -> Nat .
    op s : Nat -> Nat .
    sort NatList .
    op nil : -> NatList .
    op _:_ : Nat NatList -> NatList .

    vars XS YS : NatList .  
    vars N M X Y : Nat .
    op append : NatList NatList -> [NatList] .
    rl append(nil, YS) => YS .
    rl append(N : XS, YS) => N : append(XS, YS) .

    op last : NatList -> [Nat] .
    rl last(XS) => append(YS, N : nil) =:= XS >> N [nonexec] .

    op _>>_ : [Success] [Nat] -> [Nat] [frozen (2) strat (1 0)] .
    eq success >> X:[Nat] = X:[Nat] .

    op _=:=_ : Nat Nat -> [Success] [comm] .
    rl N =:= N => success .

    op _=:=_ : NatList NatList -> [Success] [comm] .
    rl XS =:= XS => success .
  endm)

(search [1] in LAST-APPEND : 
    last(0 : s(0) : nil) ~>! Z:Nat .)
***( Output:
Solution 1
Z:Nat --> s(0)
)***

 (mod MEMBERSHIP is
    protecting LAST-APPEND .
    vars XS YS ZS : NatList .
    vars N M X Y : Nat .
    op member : Nat NatList -> [Success] .
    rl member(N,XS) => append(YS, N : ZS) =:= XS [nonexec] .
  endm)

(search [1] in MEMBERSHIP : member(s(0),0 : s(0): nil) ~>! success .)
***( Output:
Solution 1
empty substitution
)***

(search [,5] in MEMBERSHIP : member(N:Nat,0 : s(0): nil) ~>! success .)
***( Output:
Solution 1
N:Nat --> 0
Solution 2
N:Nat --> s(0)
)***

************* Section 16.13 *********************
(reduce in FULL-MAUDE :
            metaNarrowSearch(axCohComplete(upModule(NARROWING-VENDING-MACHINE)),
              '<_>['M:Money],
              '<_>['__['a.Item, 'c.Item]],
              none, '*, unbounded, 1, unbounded) .)
***( Output: 
result ResultTriple :
  {'<_>['__['a.Item,'c.Item]],'State,
	'#1:Marking <- '__['q.Coin,'q.Coin,'q.Coin];
	'#4:Marking <- 'a.Item ;
	'#6:Money <- 'empty.Money ;
	'%3:Money <- '__['q.Coin,'q.Coin,'q.Coin];
	'M:Money <- '__['$.Coin,'q.Coin,'q.Coin,'q.Coin]}
)***

(reduce in FULL-MAUDE :
            metaNarrowSearchPath(axCohComplete(upModule(NARROWING-VENDING-MACHINE)),
              '<_>['M:Money],
              '<_>['__['a.Item, 'c.Item]],
              none, '*, unbounded, 1, unbounded) .)

***( Output: 
result TraceNarrow :
  {'<_>['__['a.Item,'q.Coin,'%3:Money]],
	'#1:Marking <- '%3:Money ;
	'#6:Money <- 'empty.Money ;
	'M:Money <- '__['$.Coin,'%3:Money],
'State,
rl '<_>['__['#1:Marking,'$.Coin]]=> '<_>['__['#1:Marking,'__['a.Item,'q.Coin]]] [label('buy-a)] .}
{'<_>['__['a.Item,'c.Item,'#6:Money]],
	'#4:Marking <- '__['a.Item,'#6:Money];
	'%3:Money <- '__['q.Coin,'q.Coin,'q.Coin,'#6:Money],
'State,
rl '<_>['__['#4:Marking,'$.Coin]]=> '<_>['__['#4:Marking,'c.Item]] [label('buy-c)] .}
)***

************* Section 16.14 *********************
(mod NARROWING-VENDING-MACHINE-NOTOPMOST-COHERENT is 
   sorts Coin Item Marking Money State . subsort Coin < Money .
   op empty : -> Money .
   op __ : Money Money -> Money [assoc comm id: empty] . 
   subsort Money Item < Marking . 
   op __ : Marking Marking -> Marking [assoc comm id: empty] . 
   subsort Marking < State .
   ops $ q : -> Coin . ops a c : -> Item . var M : Marking .
   rl [buy-c] : M $ => M c . 
   rl [buy-a] : M $ => M a q . 
   eq [change]: q q q q M = $ M [variant] . 
 endm)

(red in FULL-MAUDE :
            metaParamodulationSearch(upModule(NARROWING-VENDING-MACHINE-NOTOPMOST-COHERENT),
              'M:Money,
              '__['a.Item, 'c.Item],
              none, '*, unbounded, 1, unbounded) .)
***( Output: 
result ResultTriple :
  {'__['a.Item,'c.Item],'Marking,
	'#1:Marking <- '__['q.Coin,'q.Coin,'q.Coin];
	'#4:Marking <- 'a.Item ;
	'#6:Money <- 'empty.Money ;
	'%3:Money <- '__['q.Coin,'q.Coin,'q.Coin];
	'M:Money <- '__['$.Coin,'q.Coin,'q.Coin,'q.Coin]}
)***

************* Section 16.14 *********************

quit