ceq procSearch(ME:ModuleExpression, M:Module, T:Term, T':Term, QI, D:Bound,
    D':Bound, VDS:OpDeclSet, DB) = if solveBubblesRl(T:Term, T':Term, M:Module,
    B:Bool, VDS:OpDeclSet, DB) :: Term then procSearch2(addOps(VDS:OpDeclSet,
    M:Module), lhs(solveBubblesRl(T:Term, T':Term, M:Module, B:Bool,
    VDS:OpDeclSet, DB)), rhs(solveBubblesRl(T:Term, T':Term, M:Module, B:Bool,
    VDS:OpDeclSet, DB)), nil, QI, D:Bound, D':Bound) else solveBubblesSearchL(
    M:Module, T:Term, T':Term, QI, D:Bound, D':Bound, B:Bool, VDS:OpDeclSet,
    DB) fi if B:Bool := included('META-MODULE, getImports(getTopModule(
    ME:ModuleExpression, DB)), DB) .
ME:ModuleExpression --> 'FOO
M:Module --> mod 'FM-FOO is
  including 'FOO .
  including 'QID-LIST .
  including 'MOD-EXPRS .
  including 'META-MODULE .
  sorts none .
  none
  op '`[_`] : '@Token@ -> 'Module [none] .
  op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
  op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
  op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  op 'upModule : '@ModExp@ -> 'Module [none] .
  op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
  op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  none
  none
  none
endm
T:Term --> 'bubble[''a.Qid]
T':Term --> 'bubble[''G:Foo.Qid]
QI --> ('*).Sort
D:Bound --> unbounded
D':Bound --> unbounded
VDS:OpDeclSet --> (none).OpDeclSet
DB --> 
db(
  < '#UP# ;
     (null).Default{Term} ;
     fmod '#UP# is
       including 'QID-LIST .
       including 'MOD-EXPRS .
       including 'META-MODULE .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     fmod '#UP# is
       including 'QID-LIST .
       including 'MOD-EXPRS .
       including 'META-MODULE .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     fmod '#UP# is
       including 'META-MODULE .
       including 'MOD-EXPRS .
       including 'QID-LIST .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'ACCOUNT ;
     'omod_is_endom['token[''ACCOUNT.Qid],'__['protecting_.['token[''QID.Qid]],
    '__['protecting_.['token[''INT.Qid]],'__['subsort_.['_<_['sortToken[
    ''Qid.Qid],'sortToken[''Oid.Qid]]],'__['class_|_.['sortToken[
    ''Account.Qid],'_:_['token[''bal.Qid],'sortToken[''Int.Qid]]],'__[
    'msgs_:_->_.['neTokenList['__[''credit.Qid,''debit.Qid]],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]],'sortToken[''Msg.Qid]],'__['msg_:_->_.[
    'token[''from_to_transfer_.Qid],'__['sortToken[''Oid.Qid],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]]],'sortToken[''Msg.Qid]],'__['vars_:_.[
    'neTokenList['__[''A.Qid,''B.Qid]],'sortToken[''Oid.Qid]],'__['var_:_.[
    'neTokenList[''M.Qid],'sortToken[''Nat.Qid]],'__['vars_:_.['neTokenList[
    '__[''N.Qid,''N'.Qid]],'sortToken[''Int.Qid]],'__['rl_=>_.['bubble['__[
    ''`[.Qid,''credit.Qid,''`].Qid,'':.Qid,''credit.Qid,''`(.Qid,''A.Qid,
    ''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,
    ''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,
    ''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''+.Qid,''M.Qid,''>.Qid]]],
    '__['crl_=>_if_.['bubble['__[''`[.Qid,''debit.Qid,''`].Qid,'':.Qid,
    ''debit.Qid,''`(.Qid,''A.Qid,''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble[
    '__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N.Qid,''-.Qid,''M.Qid,''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]],
    'crl_=>_if_.['bubble['__[''`[.Qid,''transfer.Qid,''`].Qid,'':.Qid,''`(.Qid,
    ''from.Qid,''A.Qid,''to.Qid,''B.Qid,''transfer.Qid,''M.Qid,''`).Qid,
    ''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,
    ''>.Qid,''<.Qid,''B.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N'.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,
    ''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''-.Qid,''M.Qid,''>.Qid,''<.Qid,''B.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N'.Qid,''+.Qid,''M.Qid,
    ''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]]]]]]]]]]]]]] ;
     omod 'ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts none .
       subsort 'Qid < 'Oid .
       class 'Account | attr 'bal : 'Int .
       none
       none
       msg 'credit : 'Oid 'Int -> 'Msg . msg 'debit : 'Oid 'Int -> 'Msg . msg
    'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,'bal`:_[
    'N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_+_['N:Int,'M:Nat]]]
    [label('credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,'bal`:_[
    'N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,'M:Nat]]]
    if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'Account.Account,'bal`:_['N:Int]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_[
    'N':Int]]]] => '__['<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,
    'M:Nat]]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_['_+_['N':Int,'M:Nat]]]]
    if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('transfer)] .
     endom ;
     mod 'ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     op 'A : nil -> 'Oid [none] .
     op 'B : nil -> 'Oid [none] .
     op 'M : nil -> 'Nat [none] .
     op 'N : nil -> 'Int [none] .
     op 'N' : nil -> 'Int [none] . ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'CHANGE-NAME ;
     'fmod_is_endfm['token[''CHANGE-NAME.Qid],'__['pr_.['token[
    ''META-LEVEL.Qid]],'__['op_:_->_.['token[''setName.Qid],'__['sortToken[
    ''Module.Qid],'sortToken[''ModuleExpression.Qid]],'sortToken[
    ''Module.Qid]],'__['vars_:_.['neTokenList['__[''ME.Qid,''ME'.Qid]],
    'sortToken[''ModuleExpression.Qid]],'__['var_:_.['neTokenList[''IL.Qid],
    'sortToken[''ImportList.Qid]],'__['var_:_.['neTokenList[''SS.Qid],
    'sortToken[''SortSet.Qid]],'__['var_:_.['neTokenList[''SSDS.Qid],
    'sortToken[''SubsortDeclSet.Qid]],'__['var_:_.['neTokenList[''OPDS.Qid],
    'sortToken[''OpDeclSet.Qid]],'__['var_:_.['neTokenList[''MAS.Qid],
    'sortToken[''MembAxSet.Qid]],'__['var_:_.['neTokenList[''EqS.Qid],
    'sortToken[''EquationSet.Qid]],'__['var_:_.['neTokenList[''RlS.Qid],
    'sortToken[''RuleSet.Qid]],'__['eq_=_.['bubble['__[''setName.Qid,''`(.Qid,
    ''fmod.Qid,''ME.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid,''`,.Qid,''ME'.Qid,
    ''`).Qid]],'bubble['__[''fmod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,
    ''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid]]],
    'eq_=_.['bubble['__[''setName.Qid,''`(.Qid,''mod.Qid,''ME.Qid,''is.Qid,
    ''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,
    ''EqS.Qid,''RlS.Qid,''endm.Qid,''`,.Qid,''ME'.Qid,''`).Qid]],'bubble['__[
    ''mod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''RlS.Qid,
    ''endm.Qid]]]]]]]]]]]]]]] ;
     fmod 'CHANGE-NAME is
       including 'BOOL .
       protecting 'META-LEVEL .
       sorts none .
       none
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     fmod 'CHANGE-NAME is
       including 'BOOL .
       protecting 'META-LEVEL .
       sorts none .
       none
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     fmod 'CHANGE-NAME is
       protecting 'META-LEVEL .
       including 'BOOL .
       including 'META-MODULE .
       including 'MOD-EXPRS .
       including 'QID-LIST .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     op 'EqS : nil -> 'EquationSet [none] .
     op 'IL : nil -> 'ImportList [none] .
     op 'MAS : nil -> 'MembAxSet [none] .
     op 'ME : nil -> 'ModuleExpression [none] .
     op 'ME' : nil -> 'ModuleExpression [none] .
     op 'OPDS : nil -> 'OpDeclSet [none] .
     op 'RlS : nil -> 'RuleSet [none] .
     op 'SS : nil -> 'SortSet [none] .
     op 'SSDS : nil -> 'SubsortDeclSet [none] . ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'FOO ;
     'mod_is_endm['token[''FOO.Qid],'__['sort_.['sortToken[''Foo.Qid]],'__[
    'ops_:`->_.['neTokenList['__[''a.Qid,''b.Qid,''c.Qid,''d.Qid,''e.Qid]],
    'sortToken[''Foo.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,''r1.Qid,''`].Qid,
    '':.Qid,''a.Qid]],'bubble[''b.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,
    ''r2.Qid,''`].Qid,'':.Qid,''a.Qid]],'bubble[''c.Qid]],'__['rl_=>_.['bubble[
    '__[''`[.Qid,''e1.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[''d.Qid]],
    'rl_=>_.['bubble['__[''`[.Qid,''e2.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[
    ''e.Qid]]]]]]]] ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'MY-ACCOUNT ;
     (null).Default{Term} ;
     mod 'MY-ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'MY-ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'MY-ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'MY-NAT ;
     (null).Default{Term} ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  >, '#UP# . 'ACCOUNT . 'CHANGE-NAME . 'FOO . 'MY-ACCOUNT . 'MY-NAT, 
  < 'Bool ;
     'view_from_to_is_endv['token[''Bool.Qid],'token[''TRIV.Qid],'token[
    ''BOOL.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Bool.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'DEFAULT ;
     'view_from_to_is_endv['token[''DEFAULT.Qid],'token[''TRIV.Qid],'token[
    ''DEFAULT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float ;
     'view_from_to_is_endv['token[''Float.Qid],'token[''TRIV.Qid],'token[
    ''FLOAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float0 ;
     'view_from_to_is_endv['token[''Float0.Qid],'token[''DEFAULT.Qid],'token[
    ''FLOAT.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble[''0.0.Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float< ;
     'view_from_to_is_endv['token[''Float<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float<= ;
     'view_from_to_is_endv['token[''Float<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int ;
     'view_from_to_is_endv['token[''Int.Qid],'token[''TRIV.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int0 ;
     'view_from_to_is_endv['token[''Int0.Qid],'token[''DEFAULT.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int< ;
     'view_from_to_is_endv['token[''Int<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int<= ;
     'view_from_to_is_endv['token[''Int<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat ;
     'view_from_to_is_endv['token[''Nat.Qid],'token[''TRIV.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat0 ;
     'view_from_to_is_endv['token[''Nat0.Qid],'token[''DEFAULT.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat< ;
     'view_from_to_is_endv['token[''Nat<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat<= ;
     'view_from_to_is_endv['token[''Nat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Qid ;
     'view_from_to_is_endv['token[''Qid.Qid],'token[''TRIV.Qid],'token[
    ''QID.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Qid0 ;
     'view_from_to_is_endv['token[''Qid0.Qid],'token[''DEFAULT.Qid],'token[
    ''QID.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble['''.Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat ;
     'view_from_to_is_endv['token[''Rat.Qid],'token[''TRIV.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat0 ;
     'view_from_to_is_endv['token[''Rat0.Qid],'token[''DEFAULT.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat< ;
     'view_from_to_is_endv['token[''Rat<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat<= ;
     'view_from_to_is_endv['token[''Rat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'STRICT-TOTAL-ORDER ;
     'view_from_to_is_endv['token[''STRICT-TOTAL-ORDER.Qid],'token[
    ''STRICT-WEAK-ORDER.Qid],'token[''STRICT-TOTAL-ORDER.Qid],'sort_to_.[
    'sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'STRICT-WEAK-ORDER ;
     'view_from_to_is_endv['token[''STRICT-WEAK-ORDER.Qid],'token[''TRIV.Qid],
    'token[''STRICT-WEAK-ORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],
    'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String ;
     'view_from_to_is_endv['token[''String.Qid],'token[''TRIV.Qid],'token[
    ''STRING.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String0 ;
     'view_from_to_is_endv['token[''String0.Qid],'token[''DEFAULT.Qid],'token[
    ''STRING.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''String.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''"".Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String< ;
     'view_from_to_is_endv['token[''String<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String<= ;
     'view_from_to_is_endv['token[''String<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TOTAL-ORDER ;
     'view_from_to_is_endv['token[''TOTAL-ORDER.Qid],'token[
    ''TOTAL-PREORDER.Qid],'token[''TOTAL-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TOTAL-PREORDER ;
     'view_from_to_is_endv['token[''TOTAL-PREORDER.Qid],'token[''TRIV.Qid],
    'token[''TOTAL-PREORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TRIV ;
     'view_from_to_is_endv['token[''TRIV.Qid],'token[''TRIV.Qid],'token[
    ''TRIV.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  >, 'Bool # 'DEFAULT # 'Float # 'Float0 # 'Float< # 'Float<= # 'Int # 'Int0 #
    'Int< # 'Int<= # 'Nat # 'Nat0 # 'Nat< # 'Nat<= # 'Qid # 'Qid0 # 'Rat #
    'Rat0 # 'Rat< # 'Rat<= # 'STRICT-TOTAL-ORDER # 'STRICT-WEAK-ORDER # 'String
    # 'String0 # 'String< # 'String<= # 'TOTAL-ORDER # 'TOTAL-PREORDER # 'TRIV,
    emptyModuleNameSet, emptyModuleNameSet, 'BOOL, nil)
B:Bool --> false
procSearch('FOO, mod 'FM-FOO is
  including 'FOO .
  including 'QID-LIST .
  including 'MOD-EXPRS .
  including 'META-MODULE .
  sorts none .
  none
  op '`[_`] : '@Token@ -> 'Module [none] .
  op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
  op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
  op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  op 'upModule : '@ModExp@ -> 'Module [none] .
  op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
  op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  none
  none
  none
endm, 'bubble[''a.Qid], 'bubble[''G:Foo.Qid], '*, unbounded, unbounded, none, 
db(
  < '#UP# ;
     (null).Default{Term} ;
     fmod '#UP# is
       including 'QID-LIST .
       including 'MOD-EXPRS .
       including 'META-MODULE .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     fmod '#UP# is
       including 'QID-LIST .
       including 'MOD-EXPRS .
       including 'META-MODULE .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     fmod '#UP# is
       including 'META-MODULE .
       including 'MOD-EXPRS .
       including 'QID-LIST .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'ACCOUNT ;
     'omod_is_endom['token[''ACCOUNT.Qid],'__['protecting_.['token[''QID.Qid]],
    '__['protecting_.['token[''INT.Qid]],'__['subsort_.['_<_['sortToken[
    ''Qid.Qid],'sortToken[''Oid.Qid]]],'__['class_|_.['sortToken[
    ''Account.Qid],'_:_['token[''bal.Qid],'sortToken[''Int.Qid]]],'__[
    'msgs_:_->_.['neTokenList['__[''credit.Qid,''debit.Qid]],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]],'sortToken[''Msg.Qid]],'__['msg_:_->_.[
    'token[''from_to_transfer_.Qid],'__['sortToken[''Oid.Qid],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]]],'sortToken[''Msg.Qid]],'__['vars_:_.[
    'neTokenList['__[''A.Qid,''B.Qid]],'sortToken[''Oid.Qid]],'__['var_:_.[
    'neTokenList[''M.Qid],'sortToken[''Nat.Qid]],'__['vars_:_.['neTokenList[
    '__[''N.Qid,''N'.Qid]],'sortToken[''Int.Qid]],'__['rl_=>_.['bubble['__[
    ''`[.Qid,''credit.Qid,''`].Qid,'':.Qid,''credit.Qid,''`(.Qid,''A.Qid,
    ''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,
    ''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,
    ''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''+.Qid,''M.Qid,''>.Qid]]],
    '__['crl_=>_if_.['bubble['__[''`[.Qid,''debit.Qid,''`].Qid,'':.Qid,
    ''debit.Qid,''`(.Qid,''A.Qid,''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble[
    '__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N.Qid,''-.Qid,''M.Qid,''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]],
    'crl_=>_if_.['bubble['__[''`[.Qid,''transfer.Qid,''`].Qid,'':.Qid,''`(.Qid,
    ''from.Qid,''A.Qid,''to.Qid,''B.Qid,''transfer.Qid,''M.Qid,''`).Qid,
    ''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,
    ''>.Qid,''<.Qid,''B.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N'.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,
    ''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''-.Qid,''M.Qid,''>.Qid,''<.Qid,''B.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N'.Qid,''+.Qid,''M.Qid,
    ''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]]]]]]]]]]]]]] ;
     omod 'ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts none .
       subsort 'Qid < 'Oid .
       class 'Account | attr 'bal : 'Int .
       none
       none
       msg 'credit : 'Oid 'Int -> 'Msg . msg 'debit : 'Oid 'Int -> 'Msg . msg
    'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,'bal`:_[
    'N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_+_['N:Int,'M:Nat]]]
    [label('credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,'bal`:_[
    'N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,'M:Nat]]]
    if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'Account.Account,'bal`:_['N:Int]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_[
    'N':Int]]]] => '__['<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,
    'M:Nat]]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_['_+_['N':Int,'M:Nat]]]]
    if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('transfer)] .
     endom ;
     mod 'ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     op 'A : nil -> 'Oid [none] .
     op 'B : nil -> 'Oid [none] .
     op 'M : nil -> 'Nat [none] .
     op 'N : nil -> 'Int [none] .
     op 'N' : nil -> 'Int [none] . ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'CHANGE-NAME ;
     'fmod_is_endfm['token[''CHANGE-NAME.Qid],'__['pr_.['token[
    ''META-LEVEL.Qid]],'__['op_:_->_.['token[''setName.Qid],'__['sortToken[
    ''Module.Qid],'sortToken[''ModuleExpression.Qid]],'sortToken[
    ''Module.Qid]],'__['vars_:_.['neTokenList['__[''ME.Qid,''ME'.Qid]],
    'sortToken[''ModuleExpression.Qid]],'__['var_:_.['neTokenList[''IL.Qid],
    'sortToken[''ImportList.Qid]],'__['var_:_.['neTokenList[''SS.Qid],
    'sortToken[''SortSet.Qid]],'__['var_:_.['neTokenList[''SSDS.Qid],
    'sortToken[''SubsortDeclSet.Qid]],'__['var_:_.['neTokenList[''OPDS.Qid],
    'sortToken[''OpDeclSet.Qid]],'__['var_:_.['neTokenList[''MAS.Qid],
    'sortToken[''MembAxSet.Qid]],'__['var_:_.['neTokenList[''EqS.Qid],
    'sortToken[''EquationSet.Qid]],'__['var_:_.['neTokenList[''RlS.Qid],
    'sortToken[''RuleSet.Qid]],'__['eq_=_.['bubble['__[''setName.Qid,''`(.Qid,
    ''fmod.Qid,''ME.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid,''`,.Qid,''ME'.Qid,
    ''`).Qid]],'bubble['__[''fmod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,
    ''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid]]],
    'eq_=_.['bubble['__[''setName.Qid,''`(.Qid,''mod.Qid,''ME.Qid,''is.Qid,
    ''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,
    ''EqS.Qid,''RlS.Qid,''endm.Qid,''`,.Qid,''ME'.Qid,''`).Qid]],'bubble['__[
    ''mod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''RlS.Qid,
    ''endm.Qid]]]]]]]]]]]]]]] ;
     fmod 'CHANGE-NAME is
       including 'BOOL .
       protecting 'META-LEVEL .
       sorts none .
       none
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     fmod 'CHANGE-NAME is
       including 'BOOL .
       protecting 'META-LEVEL .
       sorts none .
       none
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     fmod 'CHANGE-NAME is
       protecting 'META-LEVEL .
       including 'BOOL .
       including 'META-MODULE .
       including 'MOD-EXPRS .
       including 'QID-LIST .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     op 'EqS : nil -> 'EquationSet [none] .
     op 'IL : nil -> 'ImportList [none] .
     op 'MAS : nil -> 'MembAxSet [none] .
     op 'ME : nil -> 'ModuleExpression [none] .
     op 'ME' : nil -> 'ModuleExpression [none] .
     op 'OPDS : nil -> 'OpDeclSet [none] .
     op 'RlS : nil -> 'RuleSet [none] .
     op 'SS : nil -> 'SortSet [none] .
     op 'SSDS : nil -> 'SubsortDeclSet [none] . ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'FOO ;
     'mod_is_endm['token[''FOO.Qid],'__['sort_.['sortToken[''Foo.Qid]],'__[
    'ops_:`->_.['neTokenList['__[''a.Qid,''b.Qid,''c.Qid,''d.Qid,''e.Qid]],
    'sortToken[''Foo.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,''r1.Qid,''`].Qid,
    '':.Qid,''a.Qid]],'bubble[''b.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,
    ''r2.Qid,''`].Qid,'':.Qid,''a.Qid]],'bubble[''c.Qid]],'__['rl_=>_.['bubble[
    '__[''`[.Qid,''e1.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[''d.Qid]],
    'rl_=>_.['bubble['__[''`[.Qid,''e2.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[
    ''e.Qid]]]]]]]] ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'MY-ACCOUNT ;
     (null).Default{Term} ;
     mod 'MY-ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'MY-ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'MY-ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'MY-NAT ;
     (null).Default{Term} ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  >, '#UP# . 'ACCOUNT . 'CHANGE-NAME . 'FOO . 'MY-ACCOUNT . 'MY-NAT, 
  < 'Bool ;
     'view_from_to_is_endv['token[''Bool.Qid],'token[''TRIV.Qid],'token[
    ''BOOL.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Bool.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'DEFAULT ;
     'view_from_to_is_endv['token[''DEFAULT.Qid],'token[''TRIV.Qid],'token[
    ''DEFAULT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float ;
     'view_from_to_is_endv['token[''Float.Qid],'token[''TRIV.Qid],'token[
    ''FLOAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float0 ;
     'view_from_to_is_endv['token[''Float0.Qid],'token[''DEFAULT.Qid],'token[
    ''FLOAT.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble[''0.0.Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float< ;
     'view_from_to_is_endv['token[''Float<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float<= ;
     'view_from_to_is_endv['token[''Float<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int ;
     'view_from_to_is_endv['token[''Int.Qid],'token[''TRIV.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int0 ;
     'view_from_to_is_endv['token[''Int0.Qid],'token[''DEFAULT.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int< ;
     'view_from_to_is_endv['token[''Int<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int<= ;
     'view_from_to_is_endv['token[''Int<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat ;
     'view_from_to_is_endv['token[''Nat.Qid],'token[''TRIV.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat0 ;
     'view_from_to_is_endv['token[''Nat0.Qid],'token[''DEFAULT.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat< ;
     'view_from_to_is_endv['token[''Nat<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat<= ;
     'view_from_to_is_endv['token[''Nat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Qid ;
     'view_from_to_is_endv['token[''Qid.Qid],'token[''TRIV.Qid],'token[
    ''QID.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Qid0 ;
     'view_from_to_is_endv['token[''Qid0.Qid],'token[''DEFAULT.Qid],'token[
    ''QID.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble['''.Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat ;
     'view_from_to_is_endv['token[''Rat.Qid],'token[''TRIV.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat0 ;
     'view_from_to_is_endv['token[''Rat0.Qid],'token[''DEFAULT.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat< ;
     'view_from_to_is_endv['token[''Rat<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat<= ;
     'view_from_to_is_endv['token[''Rat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'STRICT-TOTAL-ORDER ;
     'view_from_to_is_endv['token[''STRICT-TOTAL-ORDER.Qid],'token[
    ''STRICT-WEAK-ORDER.Qid],'token[''STRICT-TOTAL-ORDER.Qid],'sort_to_.[
    'sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'STRICT-WEAK-ORDER ;
     'view_from_to_is_endv['token[''STRICT-WEAK-ORDER.Qid],'token[''TRIV.Qid],
    'token[''STRICT-WEAK-ORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],
    'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String ;
     'view_from_to_is_endv['token[''String.Qid],'token[''TRIV.Qid],'token[
    ''STRING.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String0 ;
     'view_from_to_is_endv['token[''String0.Qid],'token[''DEFAULT.Qid],'token[
    ''STRING.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''String.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''"".Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String< ;
     'view_from_to_is_endv['token[''String<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String<= ;
     'view_from_to_is_endv['token[''String<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TOTAL-ORDER ;
     'view_from_to_is_endv['token[''TOTAL-ORDER.Qid],'token[
    ''TOTAL-PREORDER.Qid],'token[''TOTAL-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TOTAL-PREORDER ;
     'view_from_to_is_endv['token[''TOTAL-PREORDER.Qid],'token[''TRIV.Qid],
    'token[''TOTAL-PREORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TRIV ;
     'view_from_to_is_endv['token[''TRIV.Qid],'token[''TRIV.Qid],'token[
    ''TRIV.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  >, 'Bool # 'DEFAULT # 'Float # 'Float0 # 'Float< # 'Float<= # 'Int # 'Int0 #
    'Int< # 'Int<= # 'Nat # 'Nat0 # 'Nat< # 'Nat<= # 'Qid # 'Qid0 # 'Rat #
    'Rat0 # 'Rat< # 'Rat<= # 'STRICT-TOTAL-ORDER # 'STRICT-WEAK-ORDER # 'String
    # 'String0 # 'String< # 'String<= # 'TOTAL-ORDER # 'TOTAL-PREORDER # 'TRIV,
    emptyModuleNameSet, emptyModuleNameSet, 'BOOL, nil))
--->
if solveBubblesRl('bubble[''a.Qid], 'bubble[''G:Foo.Qid], mod 'FM-FOO is
  including 'FOO .
  including 'QID-LIST .
  including 'MOD-EXPRS .
  including 'META-MODULE .
  sorts none .
  none
  op '`[_`] : '@Token@ -> 'Module [none] .
  op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
  op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
  op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  op 'upModule : '@ModExp@ -> 'Module [none] .
  op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
  op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
  none
  none
  none
endm, false, none, 
db(
  < '#UP# ;
     (null).Default{Term} ;
     fmod '#UP# is
       including 'QID-LIST .
       including 'MOD-EXPRS .
       including 'META-MODULE .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     fmod '#UP# is
       including 'QID-LIST .
       including 'MOD-EXPRS .
       including 'META-MODULE .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     fmod '#UP# is
       including 'META-MODULE .
       including 'MOD-EXPRS .
       including 'QID-LIST .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       none
     endfm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'ACCOUNT ;
     'omod_is_endom['token[''ACCOUNT.Qid],'__['protecting_.['token[''QID.Qid]],
    '__['protecting_.['token[''INT.Qid]],'__['subsort_.['_<_['sortToken[
    ''Qid.Qid],'sortToken[''Oid.Qid]]],'__['class_|_.['sortToken[
    ''Account.Qid],'_:_['token[''bal.Qid],'sortToken[''Int.Qid]]],'__[
    'msgs_:_->_.['neTokenList['__[''credit.Qid,''debit.Qid]],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]],'sortToken[''Msg.Qid]],'__['msg_:_->_.[
    'token[''from_to_transfer_.Qid],'__['sortToken[''Oid.Qid],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]]],'sortToken[''Msg.Qid]],'__['vars_:_.[
    'neTokenList['__[''A.Qid,''B.Qid]],'sortToken[''Oid.Qid]],'__['var_:_.[
    'neTokenList[''M.Qid],'sortToken[''Nat.Qid]],'__['vars_:_.['neTokenList[
    '__[''N.Qid,''N'.Qid]],'sortToken[''Int.Qid]],'__['rl_=>_.['bubble['__[
    ''`[.Qid,''credit.Qid,''`].Qid,'':.Qid,''credit.Qid,''`(.Qid,''A.Qid,
    ''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,
    ''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,
    ''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''+.Qid,''M.Qid,''>.Qid]]],
    '__['crl_=>_if_.['bubble['__[''`[.Qid,''debit.Qid,''`].Qid,'':.Qid,
    ''debit.Qid,''`(.Qid,''A.Qid,''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble[
    '__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N.Qid,''-.Qid,''M.Qid,''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]],
    'crl_=>_if_.['bubble['__[''`[.Qid,''transfer.Qid,''`].Qid,'':.Qid,''`(.Qid,
    ''from.Qid,''A.Qid,''to.Qid,''B.Qid,''transfer.Qid,''M.Qid,''`).Qid,
    ''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,
    ''>.Qid,''<.Qid,''B.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N'.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,
    ''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''-.Qid,''M.Qid,''>.Qid,''<.Qid,''B.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N'.Qid,''+.Qid,''M.Qid,
    ''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]]]]]]]]]]]]]] ;
     omod 'ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts none .
       subsort 'Qid < 'Oid .
       class 'Account | attr 'bal : 'Int .
       none
       none
       msg 'credit : 'Oid 'Int -> 'Msg . msg 'debit : 'Oid 'Int -> 'Msg . msg
    'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,'bal`:_[
    'N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_+_['N:Int,'M:Nat]]]
    [label('credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,'bal`:_[
    'N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,'M:Nat]]]
    if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'Account.Account,'bal`:_['N:Int]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_[
    'N':Int]]]] => '__['<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,
    'M:Nat]]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_['_+_['N':Int,'M:Nat]]]]
    if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('transfer)] .
     endom ;
     mod 'ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     op 'A : nil -> 'Oid [none] .
     op 'B : nil -> 'Oid [none] .
     op 'M : nil -> 'Nat [none] .
     op 'N : nil -> 'Int [none] .
     op 'N' : nil -> 'Int [none] . ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'CHANGE-NAME ;
     'fmod_is_endfm['token[''CHANGE-NAME.Qid],'__['pr_.['token[
    ''META-LEVEL.Qid]],'__['op_:_->_.['token[''setName.Qid],'__['sortToken[
    ''Module.Qid],'sortToken[''ModuleExpression.Qid]],'sortToken[
    ''Module.Qid]],'__['vars_:_.['neTokenList['__[''ME.Qid,''ME'.Qid]],
    'sortToken[''ModuleExpression.Qid]],'__['var_:_.['neTokenList[''IL.Qid],
    'sortToken[''ImportList.Qid]],'__['var_:_.['neTokenList[''SS.Qid],
    'sortToken[''SortSet.Qid]],'__['var_:_.['neTokenList[''SSDS.Qid],
    'sortToken[''SubsortDeclSet.Qid]],'__['var_:_.['neTokenList[''OPDS.Qid],
    'sortToken[''OpDeclSet.Qid]],'__['var_:_.['neTokenList[''MAS.Qid],
    'sortToken[''MembAxSet.Qid]],'__['var_:_.['neTokenList[''EqS.Qid],
    'sortToken[''EquationSet.Qid]],'__['var_:_.['neTokenList[''RlS.Qid],
    'sortToken[''RuleSet.Qid]],'__['eq_=_.['bubble['__[''setName.Qid,''`(.Qid,
    ''fmod.Qid,''ME.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid,''`,.Qid,''ME'.Qid,
    ''`).Qid]],'bubble['__[''fmod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,
    ''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid]]],
    'eq_=_.['bubble['__[''setName.Qid,''`(.Qid,''mod.Qid,''ME.Qid,''is.Qid,
    ''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,
    ''EqS.Qid,''RlS.Qid,''endm.Qid,''`,.Qid,''ME'.Qid,''`).Qid]],'bubble['__[
    ''mod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''RlS.Qid,
    ''endm.Qid]]]]]]]]]]]]]]] ;
     fmod 'CHANGE-NAME is
       including 'BOOL .
       protecting 'META-LEVEL .
       sorts none .
       none
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     fmod 'CHANGE-NAME is
       including 'BOOL .
       protecting 'META-LEVEL .
       sorts none .
       none
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     fmod 'CHANGE-NAME is
       protecting 'META-LEVEL .
       including 'BOOL .
       including 'META-MODULE .
       including 'MOD-EXPRS .
       including 'QID-LIST .
       sorts none .
       none
       op '`[_`] : '@Token@ -> 'Module [none] .
       op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
       op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
       op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
       op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       op 'upModule : '@ModExp@ -> 'Module [none] .
       op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
       op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
       none
       eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
       eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
     endfm ;
     op 'EqS : nil -> 'EquationSet [none] .
     op 'IL : nil -> 'ImportList [none] .
     op 'MAS : nil -> 'MembAxSet [none] .
     op 'ME : nil -> 'ModuleExpression [none] .
     op 'ME' : nil -> 'ModuleExpression [none] .
     op 'OPDS : nil -> 'OpDeclSet [none] .
     op 'RlS : nil -> 'RuleSet [none] .
     op 'SS : nil -> 'SortSet [none] .
     op 'SSDS : nil -> 'SubsortDeclSet [none] . ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'FOO ;
     'mod_is_endm['token[''FOO.Qid],'__['sort_.['sortToken[''Foo.Qid]],'__[
    'ops_:`->_.['neTokenList['__[''a.Qid,''b.Qid,''c.Qid,''d.Qid,''e.Qid]],
    'sortToken[''Foo.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,''r1.Qid,''`].Qid,
    '':.Qid,''a.Qid]],'bubble[''b.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,
    ''r2.Qid,''`].Qid,'':.Qid,''a.Qid]],'bubble[''c.Qid]],'__['rl_=>_.['bubble[
    '__[''`[.Qid,''e1.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[''d.Qid]],
    'rl_=>_.['bubble['__[''`[.Qid,''e2.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[
    ''e.Qid]]]]]]]] ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     mod 'FOO is
       including 'BOOL .
       sorts 'Foo .
       none
       op 'a : nil -> 'Foo [none] .
       op 'b : nil -> 'Foo [none] .
       op 'c : nil -> 'Foo [none] .
       op 'd : nil -> 'Foo [none] .
       op 'e : nil -> 'Foo [none] .
       none
       none
       rl 'a.Foo => 'b.Foo [label('r1)] .
       rl 'a.Foo => 'c.Foo [label('r2)] .
       rl 'c.Foo => 'd.Foo [label('e1)] .
       rl 'c.Foo => 'e.Foo [label('e2)] .
     endm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'MY-ACCOUNT ;
     (null).Default{Term} ;
     mod 'MY-ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'MY-ACCOUNT is
       protecting 'INT .
       protecting 'QID .
       including 'CONFIGURATION+ .
       including 'CONFIGURATION .
       including 'BOOL .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     mod 'MY-ACCOUNT is
       including 'BOOL .
       including 'CONFIGURATION .
       including 'CONFIGURATION+ .
       protecting 'QID .
       protecting 'INT .
       sorts 'Account .
       subsort 'Account < 'Cid .
       subsort 'Qid < 'Oid .
       op 'Account : nil -> 'Account [none] .
       op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
       op 'credit : 'Oid 'Int -> 'Msg [msg] .
       op 'debit : 'Oid 'Int -> 'Msg [msg] .
       op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
       none
       none
       rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
       crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
       crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
     endm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'MY-NAT ;
     (null).Default{Term} ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     fmod 'MY-NAT is
       nil
       sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
       subsort 'NzNat < 'Nat .
       subsort 'Zero < 'Nat .
       op '0 : nil -> 'Zero [ctor] .
       op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
       op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
       op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
       op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
       op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
       op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
       op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
       op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
       op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2
    3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
       op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'not_ : 'Bool -> 'Bool [prec(53)] .
       op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
       op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
       op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
       none
       eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
       eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
       eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
       eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
       eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
       eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
       eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
       eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
       eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
     endfm ;
     (none).OpDeclSet ;
     emptyModuleNameSet ;
     emptyViewExpSet
  >, '#UP# . 'ACCOUNT . 'CHANGE-NAME . 'FOO . 'MY-ACCOUNT . 'MY-NAT, 
  < 'Bool ;
     'view_from_to_is_endv['token[''Bool.Qid],'token[''TRIV.Qid],'token[
    ''BOOL.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Bool.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'DEFAULT ;
     'view_from_to_is_endv['token[''DEFAULT.Qid],'token[''TRIV.Qid],'token[
    ''DEFAULT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float ;
     'view_from_to_is_endv['token[''Float.Qid],'token[''TRIV.Qid],'token[
    ''FLOAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float0 ;
     'view_from_to_is_endv['token[''Float0.Qid],'token[''DEFAULT.Qid],'token[
    ''FLOAT.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble[''0.0.Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float< ;
     'view_from_to_is_endv['token[''Float<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Float<= ;
     'view_from_to_is_endv['token[''Float<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int ;
     'view_from_to_is_endv['token[''Int.Qid],'token[''TRIV.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int0 ;
     'view_from_to_is_endv['token[''Int0.Qid],'token[''DEFAULT.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int< ;
     'view_from_to_is_endv['token[''Int<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Int<= ;
     'view_from_to_is_endv['token[''Int<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat ;
     'view_from_to_is_endv['token[''Nat.Qid],'token[''TRIV.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat0 ;
     'view_from_to_is_endv['token[''Nat0.Qid],'token[''DEFAULT.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat< ;
     'view_from_to_is_endv['token[''Nat<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Nat<= ;
     'view_from_to_is_endv['token[''Nat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Qid ;
     'view_from_to_is_endv['token[''Qid.Qid],'token[''TRIV.Qid],'token[
    ''QID.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Qid0 ;
     'view_from_to_is_endv['token[''Qid0.Qid],'token[''DEFAULT.Qid],'token[
    ''QID.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble['''.Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat ;
     'view_from_to_is_endv['token[''Rat.Qid],'token[''TRIV.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat0 ;
     'view_from_to_is_endv['token[''Rat0.Qid],'token[''DEFAULT.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat< ;
     'view_from_to_is_endv['token[''Rat<.Qid],'token[''STRICT-TOTAL-ORDER.Qid],
    'token[''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]]
    ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'Rat<= ;
     'view_from_to_is_endv['token[''Rat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'STRICT-TOTAL-ORDER ;
     'view_from_to_is_endv['token[''STRICT-TOTAL-ORDER.Qid],'token[
    ''STRICT-WEAK-ORDER.Qid],'token[''STRICT-TOTAL-ORDER.Qid],'sort_to_.[
    'sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'STRICT-WEAK-ORDER ;
     'view_from_to_is_endv['token[''STRICT-WEAK-ORDER.Qid],'token[''TRIV.Qid],
    'token[''STRICT-WEAK-ORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],
    'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String ;
     'view_from_to_is_endv['token[''String.Qid],'token[''TRIV.Qid],'token[
    ''STRING.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String0 ;
     'view_from_to_is_endv['token[''String0.Qid],'token[''DEFAULT.Qid],'token[
    ''STRING.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''String.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''"".Qid]]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String< ;
     'view_from_to_is_endv['token[''String<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'String<= ;
     'view_from_to_is_endv['token[''String<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TOTAL-ORDER ;
     'view_from_to_is_endv['token[''TOTAL-ORDER.Qid],'token[
    ''TOTAL-PREORDER.Qid],'token[''TOTAL-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TOTAL-PREORDER ;
     'view_from_to_is_endv['token[''TOTAL-PREORDER.Qid],'token[''TRIV.Qid],
    'token[''TOTAL-PREORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  > 
  < 'TRIV ;
     'view_from_to_is_endv['token[''TRIV.Qid],'token[''TRIV.Qid],'token[
    ''TRIV.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
     (null).View ;
     emptyModuleNameSet ;
     emptyViewExpSet
  >, 'Bool # 'DEFAULT # 'Float # 'Float0 # 'Float< # 'Float<= # 'Int # 'Int0 #
    'Int< # 'Int<= # 'Nat # 'Nat0 # 'Nat< # 'Nat<= # 'Qid # 'Qid0 # 'Rat #
    'Rat0 # 'Rat< # 'Rat<= # 'STRICT-TOTAL-ORDER # 'STRICT-WEAK-ORDER # 'String
    # 'String0 # 'String< # 'String<= # 'TOTAL-ORDER # 'TOTAL-PREORDER # 'TRIV,
    emptyModuleNameSet, emptyModuleNameSet, 'BOOL, nil)) :: Term then
    procSearch2(addOps(none, mod 'FM-FOO is
    including 'FOO .
    including 'QID-LIST .
    including 'MOD-EXPRS .
    including 'META-MODULE .
    sorts none .
    none
    op '`[_`] : '@Token@ -> 'Module [none] .
    op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
    op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
    op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
    op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
    op 'upModule : '@ModExp@ -> 'Module [none] .
    op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
    op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
    none
    none
    none
  endm), lhs(solveBubblesRl('bubble[''a.Qid], 'bubble[''G:Foo.Qid], mod 'FM-FOO
    is
    including 'FOO .
    including 'QID-LIST .
    including 'MOD-EXPRS .
    including 'META-MODULE .
    sorts none .
    none
    op '`[_`] : '@Token@ -> 'Module [none] .
    op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
    op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
    op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
    op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
    op 'upModule : '@ModExp@ -> 'Module [none] .
    op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
    op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
    none
    none
    none
  endm, false, none, 
  db  (
    < '#UP# ;
       (null).Default{Term} ;
       fmod '#UP# is
         including 'QID-LIST .
         including 'MOD-EXPRS .
         including 'META-MODULE .
         sorts none .
         none
         op '`[_`] : '@Token@ -> 'Module [none] .
         op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
         op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
         op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'upModule : '@ModExp@ -> 'Module [none] .
         op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
         op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         none
         none
       endfm ;
       fmod '#UP# is
         including 'QID-LIST .
         including 'MOD-EXPRS .
         including 'META-MODULE .
         sorts none .
         none
         op '`[_`] : '@Token@ -> 'Module [none] .
         op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
         op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
         op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'upModule : '@ModExp@ -> 'Module [none] .
         op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
         op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         none
         none
       endfm ;
       fmod '#UP# is
         including 'META-MODULE .
         including 'MOD-EXPRS .
         including 'QID-LIST .
         sorts none .
         none
         op '`[_`] : '@Token@ -> 'Module [none] .
         op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
         op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
         op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'upModule : '@ModExp@ -> 'Module [none] .
         op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
         op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         none
         none
       endfm ;
       (none).OpDeclSet ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'ACCOUNT ;
       'omod_is_endom['token[''ACCOUNT.Qid],'__['protecting_.['token[
    ''QID.Qid]],'__['protecting_.['token[''INT.Qid]],'__['subsort_.['_<_[
    'sortToken[''Qid.Qid],'sortToken[''Oid.Qid]]],'__['class_|_.['sortToken[
    ''Account.Qid],'_:_['token[''bal.Qid],'sortToken[''Int.Qid]]],'__[
    'msgs_:_->_.['neTokenList['__[''credit.Qid,''debit.Qid]],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]],'sortToken[''Msg.Qid]],'__['msg_:_->_.[
    'token[''from_to_transfer_.Qid],'__['sortToken[''Oid.Qid],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]]],'sortToken[''Msg.Qid]],'__['vars_:_.[
    'neTokenList['__[''A.Qid,''B.Qid]],'sortToken[''Oid.Qid]],'__['var_:_.[
    'neTokenList[''M.Qid],'sortToken[''Nat.Qid]],'__['vars_:_.['neTokenList[
    '__[''N.Qid,''N'.Qid]],'sortToken[''Int.Qid]],'__['rl_=>_.['bubble['__[
    ''`[.Qid,''credit.Qid,''`].Qid,'':.Qid,''credit.Qid,''`(.Qid,''A.Qid,
    ''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,
    ''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,
    ''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''+.Qid,''M.Qid,''>.Qid]]],
    '__['crl_=>_if_.['bubble['__[''`[.Qid,''debit.Qid,''`].Qid,'':.Qid,
    ''debit.Qid,''`(.Qid,''A.Qid,''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble[
    '__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N.Qid,''-.Qid,''M.Qid,''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]],
    'crl_=>_if_.['bubble['__[''`[.Qid,''transfer.Qid,''`].Qid,'':.Qid,''`(.Qid,
    ''from.Qid,''A.Qid,''to.Qid,''B.Qid,''transfer.Qid,''M.Qid,''`).Qid,
    ''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,
    ''>.Qid,''<.Qid,''B.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N'.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,
    ''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''-.Qid,''M.Qid,''>.Qid,''<.Qid,''B.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N'.Qid,''+.Qid,''M.Qid,
    ''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]]]]]]]]]]]]]] ;
       omod 'ACCOUNT is
         including 'BOOL .
         including 'CONFIGURATION .
         including 'CONFIGURATION+ .
         protecting 'QID .
         protecting 'INT .
         sorts none .
         subsort 'Qid < 'Oid .
         class 'Account | attr 'bal : 'Int .
         none
         none
         msg 'credit : 'Oid 'Int -> 'Msg . msg 'debit : 'Oid 'Int -> 'Msg . msg
    'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg .
         none
         none
         rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,
    'bal`:_['N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_+_['N:Int,
    'M:Nat]]] [label('credit)] .
         crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,
    'bal`:_['N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,
    'M:Nat]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
         crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'Account.Account,'bal`:_['N:Int]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_[
    'N':Int]]]] => '__['<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,
    'M:Nat]]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_['_+_['N':Int,'M:Nat]]]]
    if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('transfer)] .
       endom ;
       mod 'ACCOUNT is
         including 'BOOL .
         including 'CONFIGURATION .
         including 'CONFIGURATION+ .
         protecting 'QID .
         protecting 'INT .
         sorts 'Account .
         subsort 'Account < 'Cid .
         subsort 'Qid < 'Oid .
         op 'Account : nil -> 'Account [none] .
         op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
         op 'credit : 'Oid 'Int -> 'Msg [msg] .
         op 'debit : 'Oid 'Int -> 'Msg [msg] .
         op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
         none
         none
         rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
         crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
         crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
       endm ;
       mod 'ACCOUNT is
         protecting 'INT .
         protecting 'QID .
         including 'CONFIGURATION+ .
         including 'CONFIGURATION .
         including 'BOOL .
         sorts 'Account .
         subsort 'Account < 'Cid .
         subsort 'Qid < 'Oid .
         op 'Account : nil -> 'Account [none] .
         op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
         op 'credit : 'Oid 'Int -> 'Msg [msg] .
         op 'debit : 'Oid 'Int -> 'Msg [msg] .
         op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
         none
         none
         rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
         crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
         crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
       endm ;
       op 'A : nil -> 'Oid [none] .
       op 'B : nil -> 'Oid [none] .
       op 'M : nil -> 'Nat [none] .
       op 'N : nil -> 'Int [none] .
       op 'N' : nil -> 'Int [none] . ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'CHANGE-NAME ;
       'fmod_is_endfm['token[''CHANGE-NAME.Qid],'__['pr_.['token[
    ''META-LEVEL.Qid]],'__['op_:_->_.['token[''setName.Qid],'__['sortToken[
    ''Module.Qid],'sortToken[''ModuleExpression.Qid]],'sortToken[
    ''Module.Qid]],'__['vars_:_.['neTokenList['__[''ME.Qid,''ME'.Qid]],
    'sortToken[''ModuleExpression.Qid]],'__['var_:_.['neTokenList[''IL.Qid],
    'sortToken[''ImportList.Qid]],'__['var_:_.['neTokenList[''SS.Qid],
    'sortToken[''SortSet.Qid]],'__['var_:_.['neTokenList[''SSDS.Qid],
    'sortToken[''SubsortDeclSet.Qid]],'__['var_:_.['neTokenList[''OPDS.Qid],
    'sortToken[''OpDeclSet.Qid]],'__['var_:_.['neTokenList[''MAS.Qid],
    'sortToken[''MembAxSet.Qid]],'__['var_:_.['neTokenList[''EqS.Qid],
    'sortToken[''EquationSet.Qid]],'__['var_:_.['neTokenList[''RlS.Qid],
    'sortToken[''RuleSet.Qid]],'__['eq_=_.['bubble['__[''setName.Qid,''`(.Qid,
    ''fmod.Qid,''ME.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid,''`,.Qid,''ME'.Qid,
    ''`).Qid]],'bubble['__[''fmod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,
    ''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid]]],
    'eq_=_.['bubble['__[''setName.Qid,''`(.Qid,''mod.Qid,''ME.Qid,''is.Qid,
    ''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,
    ''EqS.Qid,''RlS.Qid,''endm.Qid,''`,.Qid,''ME'.Qid,''`).Qid]],'bubble['__[
    ''mod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''RlS.Qid,
    ''endm.Qid]]]]]]]]]]]]]]] ;
       fmod 'CHANGE-NAME is
         including 'BOOL .
         protecting 'META-LEVEL .
         sorts none .
         none
         op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
         none
         eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
         eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
       endfm ;
       fmod 'CHANGE-NAME is
         including 'BOOL .
         protecting 'META-LEVEL .
         sorts none .
         none
         op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
         none
         eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
         eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
       endfm ;
       fmod 'CHANGE-NAME is
         protecting 'META-LEVEL .
         including 'BOOL .
         including 'META-MODULE .
         including 'MOD-EXPRS .
         including 'QID-LIST .
         sorts none .
         none
         op '`[_`] : '@Token@ -> 'Module [none] .
         op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
         op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
         op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
         op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         op 'upModule : '@ModExp@ -> 'Module [none] .
         op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
         op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
         none
         eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
         eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
       endfm ;
       op 'EqS : nil -> 'EquationSet [none] .
       op 'IL : nil -> 'ImportList [none] .
       op 'MAS : nil -> 'MembAxSet [none] .
       op 'ME : nil -> 'ModuleExpression [none] .
       op 'ME' : nil -> 'ModuleExpression [none] .
       op 'OPDS : nil -> 'OpDeclSet [none] .
       op 'RlS : nil -> 'RuleSet [none] .
       op 'SS : nil -> 'SortSet [none] .
       op 'SSDS : nil -> 'SubsortDeclSet [none] . ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'FOO ;
       'mod_is_endm['token[''FOO.Qid],'__['sort_.['sortToken[''Foo.Qid]],'__[
    'ops_:`->_.['neTokenList['__[''a.Qid,''b.Qid,''c.Qid,''d.Qid,''e.Qid]],
    'sortToken[''Foo.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,''r1.Qid,''`].Qid,
    '':.Qid,''a.Qid]],'bubble[''b.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,
    ''r2.Qid,''`].Qid,'':.Qid,''a.Qid]],'bubble[''c.Qid]],'__['rl_=>_.['bubble[
    '__[''`[.Qid,''e1.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[''d.Qid]],
    'rl_=>_.['bubble['__[''`[.Qid,''e2.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[
    ''e.Qid]]]]]]]] ;
       mod 'FOO is
         including 'BOOL .
         sorts 'Foo .
         none
         op 'a : nil -> 'Foo [none] .
         op 'b : nil -> 'Foo [none] .
         op 'c : nil -> 'Foo [none] .
         op 'd : nil -> 'Foo [none] .
         op 'e : nil -> 'Foo [none] .
         none
         none
         rl 'a.Foo => 'b.Foo [label('r1)] .
         rl 'a.Foo => 'c.Foo [label('r2)] .
         rl 'c.Foo => 'd.Foo [label('e1)] .
         rl 'c.Foo => 'e.Foo [label('e2)] .
       endm ;
       mod 'FOO is
         including 'BOOL .
         sorts 'Foo .
         none
         op 'a : nil -> 'Foo [none] .
         op 'b : nil -> 'Foo [none] .
         op 'c : nil -> 'Foo [none] .
         op 'd : nil -> 'Foo [none] .
         op 'e : nil -> 'Foo [none] .
         none
         none
         rl 'a.Foo => 'b.Foo [label('r1)] .
         rl 'a.Foo => 'c.Foo [label('r2)] .
         rl 'c.Foo => 'd.Foo [label('e1)] .
         rl 'c.Foo => 'e.Foo [label('e2)] .
       endm ;
       mod 'FOO is
         including 'BOOL .
         sorts 'Foo .
         none
         op 'a : nil -> 'Foo [none] .
         op 'b : nil -> 'Foo [none] .
         op 'c : nil -> 'Foo [none] .
         op 'd : nil -> 'Foo [none] .
         op 'e : nil -> 'Foo [none] .
         none
         none
         rl 'a.Foo => 'b.Foo [label('r1)] .
         rl 'a.Foo => 'c.Foo [label('r2)] .
         rl 'c.Foo => 'd.Foo [label('e1)] .
         rl 'c.Foo => 'e.Foo [label('e2)] .
       endm ;
       (none).OpDeclSet ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'MY-ACCOUNT ;
       (null).Default{Term} ;
       mod 'MY-ACCOUNT is
         protecting 'INT .
         protecting 'QID .
         including 'CONFIGURATION+ .
         including 'CONFIGURATION .
         including 'BOOL .
         sorts 'Account .
         subsort 'Account < 'Cid .
         subsort 'Qid < 'Oid .
         op 'Account : nil -> 'Account [none] .
         op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
         op 'credit : 'Oid 'Int -> 'Msg [msg] .
         op 'debit : 'Oid 'Int -> 'Msg [msg] .
         op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
         none
         none
         rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
         crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
         crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
       endm ;
       mod 'MY-ACCOUNT is
         protecting 'INT .
         protecting 'QID .
         including 'CONFIGURATION+ .
         including 'CONFIGURATION .
         including 'BOOL .
         sorts 'Account .
         subsort 'Account < 'Cid .
         subsort 'Qid < 'Oid .
         op 'Account : nil -> 'Account [none] .
         op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
         op 'credit : 'Oid 'Int -> 'Msg [msg] .
         op 'debit : 'Oid 'Int -> 'Msg [msg] .
         op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
         none
         none
         rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
         crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
         crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
       endm ;
       mod 'MY-ACCOUNT is
         including 'BOOL .
         including 'CONFIGURATION .
         including 'CONFIGURATION+ .
         protecting 'QID .
         protecting 'INT .
         sorts 'Account .
         subsort 'Account < 'Cid .
         subsort 'Qid < 'Oid .
         op 'Account : nil -> 'Account [none] .
         op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
         op 'credit : 'Oid 'Int -> 'Msg [msg] .
         op 'debit : 'Oid 'Int -> 'Msg [msg] .
         op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
         none
         none
         rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
         crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
         crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],'none.AttributeSet,
    'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,'V#4:Account,'_`,_['bal`:_[
    '_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,
    '_`,_['bal`:_['_+_['N':Int,'M:Nat]],'V#7:AttributeSet]]] if '_>=_['N:Int,
    'M:Nat] = 'true.Bool [label('transfer)] .
       endm ;
       (none).OpDeclSet ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'MY-NAT ;
       (null).Default{Term} ;
       fmod 'MY-NAT is
         nil
         sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
         subsort 'NzNat < 'Nat .
         subsort 'Zero < 'Nat .
         op '0 : nil -> 'Zero [ctor] .
         op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
         op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
         op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
         op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
         op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
         op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
         op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
         op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(
    2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
         op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'not_ : 'Bool -> 'Bool [prec(53)] .
         op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
         op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
         none
         eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
         eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
         eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
         eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
         eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
         eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
         eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
         eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
         eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
       endfm ;
       fmod 'MY-NAT is
         nil
         sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
         subsort 'NzNat < 'Nat .
         subsort 'Zero < 'Nat .
         op '0 : nil -> 'Zero [ctor] .
         op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
         op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
         op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
         op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
         op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
         op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
         op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
         op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(
    2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
         op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'not_ : 'Bool -> 'Bool [prec(53)] .
         op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
         op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
         none
         eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
         eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
         eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
         eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
         eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
         eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
         eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
         eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
         eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
       endfm ;
       fmod 'MY-NAT is
         nil
         sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
         subsort 'NzNat < 'Nat .
         subsort 'Zero < 'Nat .
         op '0 : nil -> 'Zero [ctor] .
         op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
         op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
         op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
         op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
         op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
         op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
         op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
         op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
         op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(
    2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
         op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'not_ : 'Bool -> 'Bool [prec(53)] .
         op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
         op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
         op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
         none
         eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
         eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
         eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
         eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
         eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
         eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
         eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
         eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
         eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
       endfm ;
       (none).OpDeclSet ;
       emptyModuleNameSet ;
       emptyViewExpSet
    >, '#UP# . 'ACCOUNT . 'CHANGE-NAME . 'FOO . 'MY-ACCOUNT . 'MY-NAT, 
    < 'Bool ;
       'view_from_to_is_endv['token[''Bool.Qid],'token[''TRIV.Qid],'token[
    ''BOOL.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Bool.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'DEFAULT ;
       'view_from_to_is_endv['token[''DEFAULT.Qid],'token[''TRIV.Qid],'token[
    ''DEFAULT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Float ;
       'view_from_to_is_endv['token[''Float.Qid],'token[''TRIV.Qid],'token[
    ''FLOAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Float0 ;
       'view_from_to_is_endv['token[''Float0.Qid],'token[''DEFAULT.Qid],'token[
    ''FLOAT.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble[''0.0.Qid]]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Float< ;
       'view_from_to_is_endv['token[''Float<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Float<= ;
       'view_from_to_is_endv['token[''Float<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Int ;
       'view_from_to_is_endv['token[''Int.Qid],'token[''TRIV.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Int0 ;
       'view_from_to_is_endv['token[''Int0.Qid],'token[''DEFAULT.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Int< ;
       'view_from_to_is_endv['token[''Int<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Int<= ;
       'view_from_to_is_endv['token[''Int<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Nat ;
       'view_from_to_is_endv['token[''Nat.Qid],'token[''TRIV.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Nat0 ;
       'view_from_to_is_endv['token[''Nat0.Qid],'token[''DEFAULT.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Nat< ;
       'view_from_to_is_endv['token[''Nat<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Nat<= ;
       'view_from_to_is_endv['token[''Nat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Qid ;
       'view_from_to_is_endv['token[''Qid.Qid],'token[''TRIV.Qid],'token[
    ''QID.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Qid0 ;
       'view_from_to_is_endv['token[''Qid0.Qid],'token[''DEFAULT.Qid],'token[
    ''QID.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble['''.Qid]]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Rat ;
       'view_from_to_is_endv['token[''Rat.Qid],'token[''TRIV.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Rat0 ;
       'view_from_to_is_endv['token[''Rat0.Qid],'token[''DEFAULT.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Rat< ;
       'view_from_to_is_endv['token[''Rat<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'Rat<= ;
       'view_from_to_is_endv['token[''Rat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'STRICT-TOTAL-ORDER ;
       'view_from_to_is_endv['token[''STRICT-TOTAL-ORDER.Qid],'token[
    ''STRICT-WEAK-ORDER.Qid],'token[''STRICT-TOTAL-ORDER.Qid],'sort_to_.[
    'sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'STRICT-WEAK-ORDER ;
       'view_from_to_is_endv['token[''STRICT-WEAK-ORDER.Qid],'token[
    ''TRIV.Qid],'token[''STRICT-WEAK-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'String ;
       'view_from_to_is_endv['token[''String.Qid],'token[''TRIV.Qid],'token[
    ''STRING.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''String.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'String0 ;
       'view_from_to_is_endv['token[''String0.Qid],'token[''DEFAULT.Qid],
    'token[''STRING.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''String.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''"".Qid]]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'String< ;
       'view_from_to_is_endv['token[''String<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'String<= ;
       'view_from_to_is_endv['token[''String<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'TOTAL-ORDER ;
       'view_from_to_is_endv['token[''TOTAL-ORDER.Qid],'token[
    ''TOTAL-PREORDER.Qid],'token[''TOTAL-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'TOTAL-PREORDER ;
       'view_from_to_is_endv['token[''TOTAL-PREORDER.Qid],'token[''TRIV.Qid],
    'token[''TOTAL-PREORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Elt.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    > 
    < 'TRIV ;
       'view_from_to_is_endv['token[''TRIV.Qid],'token[''TRIV.Qid],'token[
    ''TRIV.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
       (null).View ;
       emptyModuleNameSet ;
       emptyViewExpSet
    >, 'Bool # 'DEFAULT # 'Float # 'Float0 # 'Float< # 'Float<= # 'Int # 'Int0
    # 'Int< # 'Int<= # 'Nat # 'Nat0 # 'Nat< # 'Nat<= # 'Qid # 'Qid0 # 'Rat #
    'Rat0 # 'Rat< # 'Rat<= # 'STRICT-TOTAL-ORDER # 'STRICT-WEAK-ORDER # 'String
    # 'String0 # 'String< # 'String<= # 'TOTAL-ORDER # 'TOTAL-PREORDER # 'TRIV,
    emptyModuleNameSet, emptyModuleNameSet, 'BOOL, nil))), rhs(solveBubblesRl(
    'bubble[''a.Qid], 'bubble[''G:Foo.Qid], mod 'FM-FOO is
      including 'FOO .
      including 'QID-LIST .
      including 'MOD-EXPRS .
      including 'META-MODULE .
      sorts none .
      none
      op '`[_`] : '@Token@ -> 'Module [none] .
      op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
      op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
      op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
      op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
      op 'upModule : '@ModExp@ -> 'Module [none] .
      op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
      op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
      none
      none
      none
    endm, false, none, 
    db    (
      < '#UP# ;
         (null).Default{Term} ;
         fmod '#UP# is
           including 'QID-LIST .
           including 'MOD-EXPRS .
           including 'META-MODULE .
           sorts none .
           none
           op '`[_`] : '@Token@ -> 'Module [none] .
           op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
           op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
           op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'upModule : '@ModExp@ -> 'Module [none] .
           op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
           op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           none
           none
         endfm ;
         fmod '#UP# is
           including 'QID-LIST .
           including 'MOD-EXPRS .
           including 'META-MODULE .
           sorts none .
           none
           op '`[_`] : '@Token@ -> 'Module [none] .
           op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
           op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
           op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'upModule : '@ModExp@ -> 'Module [none] .
           op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
           op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           none
           none
         endfm ;
         fmod '#UP# is
           including 'META-MODULE .
           including 'MOD-EXPRS .
           including 'QID-LIST .
           sorts none .
           none
           op '`[_`] : '@Token@ -> 'Module [none] .
           op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
           op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
           op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'upModule : '@ModExp@ -> 'Module [none] .
           op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
           op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           none
           none
         endfm ;
         (none).OpDeclSet ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'ACCOUNT ;
         'omod_is_endom['token[''ACCOUNT.Qid],'__['protecting_.['token[
    ''QID.Qid]],'__['protecting_.['token[''INT.Qid]],'__['subsort_.['_<_[
    'sortToken[''Qid.Qid],'sortToken[''Oid.Qid]]],'__['class_|_.['sortToken[
    ''Account.Qid],'_:_['token[''bal.Qid],'sortToken[''Int.Qid]]],'__[
    'msgs_:_->_.['neTokenList['__[''credit.Qid,''debit.Qid]],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]],'sortToken[''Msg.Qid]],'__['msg_:_->_.[
    'token[''from_to_transfer_.Qid],'__['sortToken[''Oid.Qid],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]]],'sortToken[''Msg.Qid]],'__['vars_:_.[
    'neTokenList['__[''A.Qid,''B.Qid]],'sortToken[''Oid.Qid]],'__['var_:_.[
    'neTokenList[''M.Qid],'sortToken[''Nat.Qid]],'__['vars_:_.['neTokenList[
    '__[''N.Qid,''N'.Qid]],'sortToken[''Int.Qid]],'__['rl_=>_.['bubble['__[
    ''`[.Qid,''credit.Qid,''`].Qid,'':.Qid,''credit.Qid,''`(.Qid,''A.Qid,
    ''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,
    ''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,
    ''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''+.Qid,''M.Qid,''>.Qid]]],
    '__['crl_=>_if_.['bubble['__[''`[.Qid,''debit.Qid,''`].Qid,'':.Qid,
    ''debit.Qid,''`(.Qid,''A.Qid,''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble[
    '__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N.Qid,''-.Qid,''M.Qid,''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]],
    'crl_=>_if_.['bubble['__[''`[.Qid,''transfer.Qid,''`].Qid,'':.Qid,''`(.Qid,
    ''from.Qid,''A.Qid,''to.Qid,''B.Qid,''transfer.Qid,''M.Qid,''`).Qid,
    ''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,
    ''>.Qid,''<.Qid,''B.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N'.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,
    ''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''-.Qid,''M.Qid,''>.Qid,''<.Qid,''B.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N'.Qid,''+.Qid,''M.Qid,
    ''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]]]]]]]]]]]]]] ;
         omod 'ACCOUNT is
           including 'BOOL .
           including 'CONFIGURATION .
           including 'CONFIGURATION+ .
           protecting 'QID .
           protecting 'INT .
           sorts none .
           subsort 'Qid < 'Oid .
           class 'Account | attr 'bal : 'Int .
           none
           none
           msg 'credit : 'Oid 'Int -> 'Msg . msg 'debit : 'Oid 'Int -> 'Msg .
    msg 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg .
           none
           none
           rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,
    'bal`:_['N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_+_['N:Int,
    'M:Nat]]] [label('credit)] .
           crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,
    'bal`:_['N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,
    'M:Nat]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
           crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'Account.Account,'bal`:_['N:Int]],'<_:_|_>['B:Oid,'Account.Account,
    'bal`:_['N':Int]]]] => '__['<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_[
    'N:Int,'M:Nat]]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_['_+_['N':Int,
    'M:Nat]]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('transfer)] .
         endom ;
         mod 'ACCOUNT is
           including 'BOOL .
           including 'CONFIGURATION .
           including 'CONFIGURATION+ .
           protecting 'QID .
           protecting 'INT .
           sorts 'Account .
           subsort 'Account < 'Cid .
           subsort 'Qid < 'Oid .
           op 'Account : nil -> 'Account [none] .
           op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
           op 'credit : 'Oid 'Int -> 'Msg [msg] .
           op 'debit : 'Oid 'Int -> 'Msg [msg] .
           op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
           none
           none
           rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
           crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
           crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
         endm ;
         mod 'ACCOUNT is
           protecting 'INT .
           protecting 'QID .
           including 'CONFIGURATION+ .
           including 'CONFIGURATION .
           including 'BOOL .
           sorts 'Account .
           subsort 'Account < 'Cid .
           subsort 'Qid < 'Oid .
           op 'Account : nil -> 'Account [none] .
           op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
           op 'credit : 'Oid 'Int -> 'Msg [msg] .
           op 'debit : 'Oid 'Int -> 'Msg [msg] .
           op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
           none
           none
           rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
           crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
           crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
         endm ;
         op 'A : nil -> 'Oid [none] .
         op 'B : nil -> 'Oid [none] .
         op 'M : nil -> 'Nat [none] .
         op 'N : nil -> 'Int [none] .
         op 'N' : nil -> 'Int [none] . ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'CHANGE-NAME ;
         'fmod_is_endfm['token[''CHANGE-NAME.Qid],'__['pr_.['token[
    ''META-LEVEL.Qid]],'__['op_:_->_.['token[''setName.Qid],'__['sortToken[
    ''Module.Qid],'sortToken[''ModuleExpression.Qid]],'sortToken[
    ''Module.Qid]],'__['vars_:_.['neTokenList['__[''ME.Qid,''ME'.Qid]],
    'sortToken[''ModuleExpression.Qid]],'__['var_:_.['neTokenList[''IL.Qid],
    'sortToken[''ImportList.Qid]],'__['var_:_.['neTokenList[''SS.Qid],
    'sortToken[''SortSet.Qid]],'__['var_:_.['neTokenList[''SSDS.Qid],
    'sortToken[''SubsortDeclSet.Qid]],'__['var_:_.['neTokenList[''OPDS.Qid],
    'sortToken[''OpDeclSet.Qid]],'__['var_:_.['neTokenList[''MAS.Qid],
    'sortToken[''MembAxSet.Qid]],'__['var_:_.['neTokenList[''EqS.Qid],
    'sortToken[''EquationSet.Qid]],'__['var_:_.['neTokenList[''RlS.Qid],
    'sortToken[''RuleSet.Qid]],'__['eq_=_.['bubble['__[''setName.Qid,''`(.Qid,
    ''fmod.Qid,''ME.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid,''`,.Qid,''ME'.Qid,
    ''`).Qid]],'bubble['__[''fmod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,
    ''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid]]],
    'eq_=_.['bubble['__[''setName.Qid,''`(.Qid,''mod.Qid,''ME.Qid,''is.Qid,
    ''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,
    ''EqS.Qid,''RlS.Qid,''endm.Qid,''`,.Qid,''ME'.Qid,''`).Qid]],'bubble['__[
    ''mod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''RlS.Qid,
    ''endm.Qid]]]]]]]]]]]]]]] ;
         fmod 'CHANGE-NAME is
           including 'BOOL .
           protecting 'META-LEVEL .
           sorts none .
           none
           op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
           none
           eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
           eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
         endfm ;
         fmod 'CHANGE-NAME is
           including 'BOOL .
           protecting 'META-LEVEL .
           sorts none .
           none
           op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
           none
           eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
           eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
         endfm ;
         fmod 'CHANGE-NAME is
           protecting 'META-LEVEL .
           including 'BOOL .
           including 'META-MODULE .
           including 'MOD-EXPRS .
           including 'QID-LIST .
           sorts none .
           none
           op '`[_`] : '@Token@ -> 'Module [none] .
           op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
           op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
           op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
           op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           op 'upModule : '@ModExp@ -> 'Module [none] .
           op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
           op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
           none
           eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
           eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
         endfm ;
         op 'EqS : nil -> 'EquationSet [none] .
         op 'IL : nil -> 'ImportList [none] .
         op 'MAS : nil -> 'MembAxSet [none] .
         op 'ME : nil -> 'ModuleExpression [none] .
         op 'ME' : nil -> 'ModuleExpression [none] .
         op 'OPDS : nil -> 'OpDeclSet [none] .
         op 'RlS : nil -> 'RuleSet [none] .
         op 'SS : nil -> 'SortSet [none] .
         op 'SSDS : nil -> 'SubsortDeclSet [none] . ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'FOO ;
         'mod_is_endm['token[''FOO.Qid],'__['sort_.['sortToken[''Foo.Qid]],'__[
    'ops_:`->_.['neTokenList['__[''a.Qid,''b.Qid,''c.Qid,''d.Qid,''e.Qid]],
    'sortToken[''Foo.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,''r1.Qid,''`].Qid,
    '':.Qid,''a.Qid]],'bubble[''b.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,
    ''r2.Qid,''`].Qid,'':.Qid,''a.Qid]],'bubble[''c.Qid]],'__['rl_=>_.['bubble[
    '__[''`[.Qid,''e1.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[''d.Qid]],
    'rl_=>_.['bubble['__[''`[.Qid,''e2.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[
    ''e.Qid]]]]]]]] ;
         mod 'FOO is
           including 'BOOL .
           sorts 'Foo .
           none
           op 'a : nil -> 'Foo [none] .
           op 'b : nil -> 'Foo [none] .
           op 'c : nil -> 'Foo [none] .
           op 'd : nil -> 'Foo [none] .
           op 'e : nil -> 'Foo [none] .
           none
           none
           rl 'a.Foo => 'b.Foo [label('r1)] .
           rl 'a.Foo => 'c.Foo [label('r2)] .
           rl 'c.Foo => 'd.Foo [label('e1)] .
           rl 'c.Foo => 'e.Foo [label('e2)] .
         endm ;
         mod 'FOO is
           including 'BOOL .
           sorts 'Foo .
           none
           op 'a : nil -> 'Foo [none] .
           op 'b : nil -> 'Foo [none] .
           op 'c : nil -> 'Foo [none] .
           op 'd : nil -> 'Foo [none] .
           op 'e : nil -> 'Foo [none] .
           none
           none
           rl 'a.Foo => 'b.Foo [label('r1)] .
           rl 'a.Foo => 'c.Foo [label('r2)] .
           rl 'c.Foo => 'd.Foo [label('e1)] .
           rl 'c.Foo => 'e.Foo [label('e2)] .
         endm ;
         mod 'FOO is
           including 'BOOL .
           sorts 'Foo .
           none
           op 'a : nil -> 'Foo [none] .
           op 'b : nil -> 'Foo [none] .
           op 'c : nil -> 'Foo [none] .
           op 'd : nil -> 'Foo [none] .
           op 'e : nil -> 'Foo [none] .
           none
           none
           rl 'a.Foo => 'b.Foo [label('r1)] .
           rl 'a.Foo => 'c.Foo [label('r2)] .
           rl 'c.Foo => 'd.Foo [label('e1)] .
           rl 'c.Foo => 'e.Foo [label('e2)] .
         endm ;
         (none).OpDeclSet ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'MY-ACCOUNT ;
         (null).Default{Term} ;
         mod 'MY-ACCOUNT is
           protecting 'INT .
           protecting 'QID .
           including 'CONFIGURATION+ .
           including 'CONFIGURATION .
           including 'BOOL .
           sorts 'Account .
           subsort 'Account < 'Cid .
           subsort 'Qid < 'Oid .
           op 'Account : nil -> 'Account [none] .
           op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
           op 'credit : 'Oid 'Int -> 'Msg [msg] .
           op 'debit : 'Oid 'Int -> 'Msg [msg] .
           op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
           none
           none
           rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
           crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
           crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
         endm ;
         mod 'MY-ACCOUNT is
           protecting 'INT .
           protecting 'QID .
           including 'CONFIGURATION+ .
           including 'CONFIGURATION .
           including 'BOOL .
           sorts 'Account .
           subsort 'Account < 'Cid .
           subsort 'Qid < 'Oid .
           op 'Account : nil -> 'Account [none] .
           op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
           op 'credit : 'Oid 'Int -> 'Msg [msg] .
           op 'debit : 'Oid 'Int -> 'Msg [msg] .
           op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
           none
           none
           rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
           crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
           crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
         endm ;
         mod 'MY-ACCOUNT is
           including 'BOOL .
           including 'CONFIGURATION .
           including 'CONFIGURATION+ .
           protecting 'QID .
           protecting 'INT .
           sorts 'Account .
           subsort 'Account < 'Cid .
           subsort 'Qid < 'Oid .
           op 'Account : nil -> 'Account [none] .
           op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
           op 'credit : 'Oid 'Int -> 'Msg [msg] .
           op 'debit : 'Oid 'Int -> 'Msg [msg] .
           op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
           none
           none
           rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
           crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
           crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
         endm ;
         (none).OpDeclSet ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'MY-NAT ;
         (null).Default{Term} ;
         fmod 'MY-NAT is
           nil
           sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
           subsort 'NzNat < 'Nat .
           subsort 'Zero < 'Nat .
           op '0 : nil -> 'Zero [ctor] .
           op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
           op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
           op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
           op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
           op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
           op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
           op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
           op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [
    poly(2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
           op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'not_ : 'Bool -> 'Bool [prec(53)] .
           op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
           op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
           none
           eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
           eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
           eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
           eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
           eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_[
    'A:Bool,'B:Bool]]] [none] .
           eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
           eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
           eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
           eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
         endfm ;
         fmod 'MY-NAT is
           nil
           sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
           subsort 'NzNat < 'Nat .
           subsort 'Zero < 'Nat .
           op '0 : nil -> 'Zero [ctor] .
           op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
           op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
           op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
           op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
           op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
           op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
           op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
           op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [
    poly(2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
           op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'not_ : 'Bool -> 'Bool [prec(53)] .
           op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
           op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
           none
           eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
           eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
           eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
           eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
           eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_[
    'A:Bool,'B:Bool]]] [none] .
           eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
           eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
           eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
           eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
         endfm ;
         fmod 'MY-NAT is
           nil
           sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
           subsort 'NzNat < 'Nat .
           subsort 'Zero < 'Nat .
           op '0 : nil -> 'Zero [ctor] .
           op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
           op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
           op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
           op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
           op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
           op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
           op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
           op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
           op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [
    poly(2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
           op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'not_ : 'Bool -> 'Bool [prec(53)] .
           op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
           op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
           op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
           none
           eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
           eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,
    'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
           eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
           eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
           eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_[
    'A:Bool,'B:Bool]]] [none] .
           eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
           eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
           eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
           eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
         endfm ;
         (none).OpDeclSet ;
         emptyModuleNameSet ;
         emptyViewExpSet
      >, '#UP# . 'ACCOUNT . 'CHANGE-NAME . 'FOO . 'MY-ACCOUNT . 'MY-NAT, 
      < 'Bool ;
         'view_from_to_is_endv['token[''Bool.Qid],'token[''TRIV.Qid],'token[
    ''BOOL.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Bool.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'DEFAULT ;
         'view_from_to_is_endv['token[''DEFAULT.Qid],'token[''TRIV.Qid],'token[
    ''DEFAULT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Float ;
         'view_from_to_is_endv['token[''Float.Qid],'token[''TRIV.Qid],'token[
    ''FLOAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Float0 ;
         'view_from_to_is_endv['token[''Float0.Qid],'token[''DEFAULT.Qid],
    'token[''FLOAT.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Float.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''0.0.Qid]]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Float< ;
         'view_from_to_is_endv['token[''Float<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Float<= ;
         'view_from_to_is_endv['token[''Float<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Int ;
         'view_from_to_is_endv['token[''Int.Qid],'token[''TRIV.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Int0 ;
         'view_from_to_is_endv['token[''Int0.Qid],'token[''DEFAULT.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Int< ;
         'view_from_to_is_endv['token[''Int<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Int<= ;
         'view_from_to_is_endv['token[''Int<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Nat ;
         'view_from_to_is_endv['token[''Nat.Qid],'token[''TRIV.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Nat0 ;
         'view_from_to_is_endv['token[''Nat0.Qid],'token[''DEFAULT.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Nat< ;
         'view_from_to_is_endv['token[''Nat<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Nat<= ;
         'view_from_to_is_endv['token[''Nat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Qid ;
         'view_from_to_is_endv['token[''Qid.Qid],'token[''TRIV.Qid],'token[
    ''QID.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Qid0 ;
         'view_from_to_is_endv['token[''Qid0.Qid],'token[''DEFAULT.Qid],'token[
    ''QID.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]],
    'op_to`term_.['bubble[''0.Qid],'bubble['''.Qid]]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Rat ;
         'view_from_to_is_endv['token[''Rat.Qid],'token[''TRIV.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Rat0 ;
         'view_from_to_is_endv['token[''Rat0.Qid],'token[''DEFAULT.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Rat< ;
         'view_from_to_is_endv['token[''Rat<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'Rat<= ;
         'view_from_to_is_endv['token[''Rat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'STRICT-TOTAL-ORDER ;
         'view_from_to_is_endv['token[''STRICT-TOTAL-ORDER.Qid],'token[
    ''STRICT-WEAK-ORDER.Qid],'token[''STRICT-TOTAL-ORDER.Qid],'sort_to_.[
    'sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'STRICT-WEAK-ORDER ;
         'view_from_to_is_endv['token[''STRICT-WEAK-ORDER.Qid],'token[
    ''TRIV.Qid],'token[''STRICT-WEAK-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'String ;
         'view_from_to_is_endv['token[''String.Qid],'token[''TRIV.Qid],'token[
    ''STRING.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''String.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'String0 ;
         'view_from_to_is_endv['token[''String0.Qid],'token[''DEFAULT.Qid],
    'token[''STRING.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''String.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''"".Qid]]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'String< ;
         'view_from_to_is_endv['token[''String<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'String<= ;
         'view_from_to_is_endv['token[''String<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'TOTAL-ORDER ;
         'view_from_to_is_endv['token[''TOTAL-ORDER.Qid],'token[
    ''TOTAL-PREORDER.Qid],'token[''TOTAL-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'TOTAL-PREORDER ;
         'view_from_to_is_endv['token[''TOTAL-PREORDER.Qid],'token[''TRIV.Qid],
    'token[''TOTAL-PREORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Elt.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      > 
      < 'TRIV ;
         'view_from_to_is_endv['token[''TRIV.Qid],'token[''TRIV.Qid],'token[
    ''TRIV.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
         (null).View ;
         emptyModuleNameSet ;
         emptyViewExpSet
      >, 'Bool # 'DEFAULT # 'Float # 'Float0 # 'Float< # 'Float<= # 'Int #
    'Int0 # 'Int< # 'Int<= # 'Nat # 'Nat0 # 'Nat< # 'Nat<= # 'Qid # 'Qid0 #
    'Rat # 'Rat0 # 'Rat< # 'Rat<= # 'STRICT-TOTAL-ORDER # 'STRICT-WEAK-ORDER #
    'String # 'String0 # 'String< # 'String<= # 'TOTAL-ORDER # 'TOTAL-PREORDER
    # 'TRIV, emptyModuleNameSet, emptyModuleNameSet, 'BOOL, nil))), nil, '*,
    unbounded, unbounded) else solveBubblesSearchL(mod 'FM-FOO is
        including 'FOO .
        including 'QID-LIST .
        including 'MOD-EXPRS .
        including 'META-MODULE .
        sorts none .
        none
        op '`[_`] : '@Token@ -> 'Module [none] .
        op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
        op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
        op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
        op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
        op 'upModule : '@ModExp@ -> 'Module [none] .
        op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
        op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
        none
        none
        none
      endm, 'bubble[''a.Qid], 'bubble[''G:Foo.Qid], '*, unbounded, unbounded,
    false, none, 
      db      (
        < '#UP# ;
           (null).Default{Term} ;
           fmod '#UP# is
             including 'QID-LIST .
             including 'MOD-EXPRS .
             including 'META-MODULE .
             sorts none .
             none
             op '`[_`] : '@Token@ -> 'Module [none] .
             op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
             op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
             op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'upModule : '@ModExp@ -> 'Module [none] .
             op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
             op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             none
             none
           endfm ;
           fmod '#UP# is
             including 'QID-LIST .
             including 'MOD-EXPRS .
             including 'META-MODULE .
             sorts none .
             none
             op '`[_`] : '@Token@ -> 'Module [none] .
             op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
             op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
             op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'upModule : '@ModExp@ -> 'Module [none] .
             op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
             op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             none
             none
           endfm ;
           fmod '#UP# is
             including 'META-MODULE .
             including 'MOD-EXPRS .
             including 'QID-LIST .
             sorts none .
             none
             op '`[_`] : '@Token@ -> 'Module [none] .
             op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
             op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
             op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'upModule : '@ModExp@ -> 'Module [none] .
             op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
             op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             none
             none
           endfm ;
           (none).OpDeclSet ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'ACCOUNT ;
           'omod_is_endom['token[''ACCOUNT.Qid],'__['protecting_.['token[
    ''QID.Qid]],'__['protecting_.['token[''INT.Qid]],'__['subsort_.['_<_[
    'sortToken[''Qid.Qid],'sortToken[''Oid.Qid]]],'__['class_|_.['sortToken[
    ''Account.Qid],'_:_['token[''bal.Qid],'sortToken[''Int.Qid]]],'__[
    'msgs_:_->_.['neTokenList['__[''credit.Qid,''debit.Qid]],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]],'sortToken[''Msg.Qid]],'__['msg_:_->_.[
    'token[''from_to_transfer_.Qid],'__['sortToken[''Oid.Qid],'__['sortToken[
    ''Oid.Qid],'sortToken[''Int.Qid]]],'sortToken[''Msg.Qid]],'__['vars_:_.[
    'neTokenList['__[''A.Qid,''B.Qid]],'sortToken[''Oid.Qid]],'__['var_:_.[
    'neTokenList[''M.Qid],'sortToken[''Nat.Qid]],'__['vars_:_.['neTokenList[
    '__[''N.Qid,''N'.Qid]],'sortToken[''Int.Qid]],'__['rl_=>_.['bubble['__[
    ''`[.Qid,''credit.Qid,''`].Qid,'':.Qid,''credit.Qid,''`(.Qid,''A.Qid,
    ''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,
    ''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,
    ''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''+.Qid,''M.Qid,''>.Qid]]],
    '__['crl_=>_if_.['bubble['__[''`[.Qid,''debit.Qid,''`].Qid,'':.Qid,
    ''debit.Qid,''`(.Qid,''A.Qid,''`,.Qid,''M.Qid,''`).Qid,''<.Qid,''A.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''>.Qid]],'bubble[
    '__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N.Qid,''-.Qid,''M.Qid,''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]],
    'crl_=>_if_.['bubble['__[''`[.Qid,''transfer.Qid,''`].Qid,'':.Qid,''`(.Qid,
    ''from.Qid,''A.Qid,''to.Qid,''B.Qid,''transfer.Qid,''M.Qid,''`).Qid,
    ''<.Qid,''A.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N.Qid,
    ''>.Qid,''<.Qid,''B.Qid,'':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,
    ''N'.Qid,''>.Qid]],'bubble['__[''<.Qid,''A.Qid,'':.Qid,''Account.Qid,
    ''|.Qid,''bal.Qid,'':.Qid,''N.Qid,''-.Qid,''M.Qid,''>.Qid,''<.Qid,''B.Qid,
    '':.Qid,''Account.Qid,''|.Qid,''bal.Qid,'':.Qid,''N'.Qid,''+.Qid,''M.Qid,
    ''>.Qid]],'bubble['__[''N.Qid,''>=.Qid,''M.Qid]]]]]]]]]]]]]]] ;
           omod 'ACCOUNT is
             including 'BOOL .
             including 'CONFIGURATION .
             including 'CONFIGURATION+ .
             protecting 'QID .
             protecting 'INT .
             sorts none .
             subsort 'Qid < 'Oid .
             class 'Account | attr 'bal : 'Int .
             none
             none
             msg 'credit : 'Oid 'Int -> 'Msg . msg 'debit : 'Oid 'Int -> 'Msg .
    msg 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg .
             none
             none
             rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,
    'bal`:_['N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_+_['N:Int,
    'M:Nat]]] [label('credit)] .
             crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'Account.Account,
    'bal`:_['N:Int]]] => '<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_['N:Int,
    'M:Nat]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
             crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'Account.Account,'bal`:_['N:Int]],'<_:_|_>['B:Oid,'Account.Account,
    'bal`:_['N':Int]]]] => '__['<_:_|_>['A:Oid,'Account.Account,'bal`:_['_-_[
    'N:Int,'M:Nat]]],'<_:_|_>['B:Oid,'Account.Account,'bal`:_['_+_['N':Int,
    'M:Nat]]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label('transfer)] .
           endom ;
           mod 'ACCOUNT is
             including 'BOOL .
             including 'CONFIGURATION .
             including 'CONFIGURATION+ .
             protecting 'QID .
             protecting 'INT .
             sorts 'Account .
             subsort 'Account < 'Cid .
             subsort 'Qid < 'Oid .
             op 'Account : nil -> 'Account [none] .
             op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
             op 'credit : 'Oid 'Int -> 'Msg [msg] .
             op 'debit : 'Oid 'Int -> 'Msg [msg] .
             op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
             none
             none
             rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
             crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
             crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
           endm ;
           mod 'ACCOUNT is
             protecting 'INT .
             protecting 'QID .
             including 'CONFIGURATION+ .
             including 'CONFIGURATION .
             including 'BOOL .
             sorts 'Account .
             subsort 'Account < 'Cid .
             subsort 'Qid < 'Oid .
             op 'Account : nil -> 'Account [none] .
             op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
             op 'credit : 'Oid 'Int -> 'Msg [msg] .
             op 'debit : 'Oid 'Int -> 'Msg [msg] .
             op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
             none
             none
             rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
             crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
             crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
           endm ;
           op 'A : nil -> 'Oid [none] .
           op 'B : nil -> 'Oid [none] .
           op 'M : nil -> 'Nat [none] .
           op 'N : nil -> 'Int [none] .
           op 'N' : nil -> 'Int [none] . ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'CHANGE-NAME ;
           'fmod_is_endfm['token[''CHANGE-NAME.Qid],'__['pr_.['token[
    ''META-LEVEL.Qid]],'__['op_:_->_.['token[''setName.Qid],'__['sortToken[
    ''Module.Qid],'sortToken[''ModuleExpression.Qid]],'sortToken[
    ''Module.Qid]],'__['vars_:_.['neTokenList['__[''ME.Qid,''ME'.Qid]],
    'sortToken[''ModuleExpression.Qid]],'__['var_:_.['neTokenList[''IL.Qid],
    'sortToken[''ImportList.Qid]],'__['var_:_.['neTokenList[''SS.Qid],
    'sortToken[''SortSet.Qid]],'__['var_:_.['neTokenList[''SSDS.Qid],
    'sortToken[''SubsortDeclSet.Qid]],'__['var_:_.['neTokenList[''OPDS.Qid],
    'sortToken[''OpDeclSet.Qid]],'__['var_:_.['neTokenList[''MAS.Qid],
    'sortToken[''MembAxSet.Qid]],'__['var_:_.['neTokenList[''EqS.Qid],
    'sortToken[''EquationSet.Qid]],'__['var_:_.['neTokenList[''RlS.Qid],
    'sortToken[''RuleSet.Qid]],'__['eq_=_.['bubble['__[''setName.Qid,''`(.Qid,
    ''fmod.Qid,''ME.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid,''`,.Qid,''ME'.Qid,
    ''`).Qid]],'bubble['__[''fmod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,
    ''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''endfm.Qid]]],
    'eq_=_.['bubble['__[''setName.Qid,''`(.Qid,''mod.Qid,''ME.Qid,''is.Qid,
    ''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,''SSDS.Qid,''OPDS.Qid,''MAS.Qid,
    ''EqS.Qid,''RlS.Qid,''endm.Qid,''`,.Qid,''ME'.Qid,''`).Qid]],'bubble['__[
    ''mod.Qid,''ME'.Qid,''is.Qid,''IL.Qid,''sorts.Qid,''SS.Qid,''..Qid,
    ''SSDS.Qid,''OPDS.Qid,''MAS.Qid,''EqS.Qid,''RlS.Qid,
    ''endm.Qid]]]]]]]]]]]]]]] ;
           fmod 'CHANGE-NAME is
             including 'BOOL .
             protecting 'META-LEVEL .
             sorts none .
             none
             op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
             none
             eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
             eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
           endfm ;
           fmod 'CHANGE-NAME is
             including 'BOOL .
             protecting 'META-LEVEL .
             sorts none .
             none
             op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
             none
             eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
             eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
           endfm ;
           fmod 'CHANGE-NAME is
             protecting 'META-LEVEL .
             including 'BOOL .
             including 'META-MODULE .
             including 'MOD-EXPRS .
             including 'QID-LIST .
             sorts none .
             none
             op '`[_`] : '@Token@ -> 'Module [none] .
             op 'bubble : 'QidList -> '@Bubble@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'neTokenList : 'QidList -> '@NeTokenList@ [special(
    id-hook('Bubble, '1 '-1 '`( '`)) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '.))] .
             op 'setName : 'Module 'ModuleExpression -> 'Module [none] .
             op 'sortToken : 'Qid -> '@SortToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    id-hook('Exclude, '`[ '`] '< 'to '`, '. '`( '`) '`{ '`} ': 'ditto
    'precedence 'prec 'gather 'assoc 'associative 'comm 'commutative 'ctor
    'constructor 'id: 'strat 'strategy 'poly 'memo 'memoization 'iter 'frozen
    'config 'object 'msg))] .
             op 'token : 'Qid -> '@Token@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             op 'upModule : '@ModExp@ -> 'Module [none] .
             op 'upTerm : '@ModExp@ '@Bubble@ -> 'Term [none] .
             op 'viewToken : 'Qid -> '@ViewToken@ [special(
    id-hook('Bubble, '1 '1) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .
             none
             eq 'setName['fmod_is_sorts_.____endfm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet],'ME':ModuleExpression] =
    'fmod_is_sorts_.____endfm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet] [
    none] .
             eq 'setName['mod_is_sorts_._____endm['ME:ModuleExpression,
    'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EqS:EquationSet,'RlS:RuleSet],'ME':ModuleExpression] =
    'mod_is_sorts_._____endm['ME':ModuleExpression,'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EqS:EquationSet,
    'RlS:RuleSet] [none] .
           endfm ;
           op 'EqS : nil -> 'EquationSet [none] .
           op 'IL : nil -> 'ImportList [none] .
           op 'MAS : nil -> 'MembAxSet [none] .
           op 'ME : nil -> 'ModuleExpression [none] .
           op 'ME' : nil -> 'ModuleExpression [none] .
           op 'OPDS : nil -> 'OpDeclSet [none] .
           op 'RlS : nil -> 'RuleSet [none] .
           op 'SS : nil -> 'SortSet [none] .
           op 'SSDS : nil -> 'SubsortDeclSet [none] . ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'FOO ;
           'mod_is_endm['token[''FOO.Qid],'__['sort_.['sortToken[''Foo.Qid]],
    '__['ops_:`->_.['neTokenList['__[''a.Qid,''b.Qid,''c.Qid,''d.Qid,''e.Qid]],
    'sortToken[''Foo.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,''r1.Qid,''`].Qid,
    '':.Qid,''a.Qid]],'bubble[''b.Qid]],'__['rl_=>_.['bubble['__[''`[.Qid,
    ''r2.Qid,''`].Qid,'':.Qid,''a.Qid]],'bubble[''c.Qid]],'__['rl_=>_.['bubble[
    '__[''`[.Qid,''e1.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[''d.Qid]],
    'rl_=>_.['bubble['__[''`[.Qid,''e2.Qid,''`].Qid,'':.Qid,''c.Qid]],'bubble[
    ''e.Qid]]]]]]]] ;
           mod 'FOO is
             including 'BOOL .
             sorts 'Foo .
             none
             op 'a : nil -> 'Foo [none] .
             op 'b : nil -> 'Foo [none] .
             op 'c : nil -> 'Foo [none] .
             op 'd : nil -> 'Foo [none] .
             op 'e : nil -> 'Foo [none] .
             none
             none
             rl 'a.Foo => 'b.Foo [label('r1)] .
             rl 'a.Foo => 'c.Foo [label('r2)] .
             rl 'c.Foo => 'd.Foo [label('e1)] .
             rl 'c.Foo => 'e.Foo [label('e2)] .
           endm ;
           mod 'FOO is
             including 'BOOL .
             sorts 'Foo .
             none
             op 'a : nil -> 'Foo [none] .
             op 'b : nil -> 'Foo [none] .
             op 'c : nil -> 'Foo [none] .
             op 'd : nil -> 'Foo [none] .
             op 'e : nil -> 'Foo [none] .
             none
             none
             rl 'a.Foo => 'b.Foo [label('r1)] .
             rl 'a.Foo => 'c.Foo [label('r2)] .
             rl 'c.Foo => 'd.Foo [label('e1)] .
             rl 'c.Foo => 'e.Foo [label('e2)] .
           endm ;
           mod 'FOO is
             including 'BOOL .
             sorts 'Foo .
             none
             op 'a : nil -> 'Foo [none] .
             op 'b : nil -> 'Foo [none] .
             op 'c : nil -> 'Foo [none] .
             op 'd : nil -> 'Foo [none] .
             op 'e : nil -> 'Foo [none] .
             none
             none
             rl 'a.Foo => 'b.Foo [label('r1)] .
             rl 'a.Foo => 'c.Foo [label('r2)] .
             rl 'c.Foo => 'd.Foo [label('e1)] .
             rl 'c.Foo => 'e.Foo [label('e2)] .
           endm ;
           (none).OpDeclSet ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'MY-ACCOUNT ;
           (null).Default{Term} ;
           mod 'MY-ACCOUNT is
             protecting 'INT .
             protecting 'QID .
             including 'CONFIGURATION+ .
             including 'CONFIGURATION .
             including 'BOOL .
             sorts 'Account .
             subsort 'Account < 'Cid .
             subsort 'Qid < 'Oid .
             op 'Account : nil -> 'Account [none] .
             op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
             op 'credit : 'Oid 'Int -> 'Msg [msg] .
             op 'debit : 'Oid 'Int -> 'Msg [msg] .
             op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
             none
             none
             rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
             crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
             crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
           endm ;
           mod 'MY-ACCOUNT is
             protecting 'INT .
             protecting 'QID .
             including 'CONFIGURATION+ .
             including 'CONFIGURATION .
             including 'BOOL .
             sorts 'Account .
             subsort 'Account < 'Cid .
             subsort 'Qid < 'Oid .
             op 'Account : nil -> 'Account [none] .
             op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
             op 'credit : 'Oid 'Int -> 'Msg [msg] .
             op 'debit : 'Oid 'Int -> 'Msg [msg] .
             op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
             none
             none
             rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
             crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
             crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
           endm ;
           mod 'MY-ACCOUNT is
             including 'BOOL .
             including 'CONFIGURATION .
             including 'CONFIGURATION+ .
             protecting 'QID .
             protecting 'INT .
             sorts 'Account .
             subsort 'Account < 'Cid .
             subsort 'Qid < 'Oid .
             op 'Account : nil -> 'Account [none] .
             op 'bal`:_ : 'Int -> 'Attribute [gather('&)] .
             op 'credit : 'Oid 'Int -> 'Msg [msg] .
             op 'debit : 'Oid 'Int -> 'Msg [msg] .
             op 'from_to_transfer_ : 'Oid 'Oid 'Int -> 'Msg [msg] .
             none
             none
             rl '__['credit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#0:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#1:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#0:Account,'_`,_['bal`:_['_+_['N:Int,'M:Nat]],'V#1:AttributeSet]] [label(
    'credit)] .
             crl '__['debit['A:Oid,'M:Nat],'<_:_|_>['A:Oid,'V#2:Account,'_`,_[
    'bal`:_['N:Int],'none.AttributeSet,'V#3:AttributeSet]]] => '<_:_|_>['A:Oid,
    'V#2:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#3:AttributeSet]] if
    '_>=_['N:Int,'M:Nat] = 'true.Bool [label('debit)] .
             crl '__['from_to_transfer_['A:Oid,'B:Oid,'M:Nat],'__['<_:_|_>[
    'A:Oid,'V#4:Account,'_`,_['bal`:_['N:Int],'none.AttributeSet,
    'V#5:AttributeSet]],'<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['N':Int],
    'none.AttributeSet,'V#7:AttributeSet]]]] => '__['<_:_|_>['A:Oid,
    'V#4:Account,'_`,_['bal`:_['_-_['N:Int,'M:Nat]],'V#5:AttributeSet]],
    '<_:_|_>['B:Oid,'V#6:Account,'_`,_['bal`:_['_+_['N':Int,'M:Nat]],
    'V#7:AttributeSet]]] if '_>=_['N:Int,'M:Nat] = 'true.Bool [label(
    'transfer)] .
           endm ;
           (none).OpDeclSet ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'MY-NAT ;
           (null).Default{Term} ;
           fmod 'MY-NAT is
             nil
             sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
             subsort 'NzNat < 'Nat .
             subsort 'Zero < 'Nat .
             op '0 : nil -> 'Zero [ctor] .
             op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
             op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
             op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
             op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
             op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
             op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
             op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
             op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [
    poly(2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
             op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'not_ : 'Bool -> 'Bool [prec(53)] .
             op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
             op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
             none
             eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
             eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_[
    'A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
             eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
             eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
             eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_[
    'A:Bool,'B:Bool]]] [none] .
             eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
             eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
             eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
             eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
           endfm ;
           fmod 'MY-NAT is
             nil
             sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
             subsort 'NzNat < 'Nat .
             subsort 'Zero < 'Nat .
             op '0 : nil -> 'Zero [ctor] .
             op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
             op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
             op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
             op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
             op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
             op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
             op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
             op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [
    poly(2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
             op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'not_ : 'Bool -> 'Bool [prec(53)] .
             op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
             op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
             none
             eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
             eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_[
    'A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
             eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
             eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
             eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_[
    'A:Bool,'B:Bool]]] [none] .
             eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
             eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
             eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
             eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
           endfm ;
           fmod 'MY-NAT is
             nil
             sorts 'Bool ; 'Nat ; 'NzNat ; 'Zero .
             subsort 'NzNat < 'Nat .
             subsort 'Zero < 'Nat .
             op '0 : nil -> 'Zero [ctor] .
             op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
             op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2)
    special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
             op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
             op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
             op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
             op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
             op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
             op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
             op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [
    poly(2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
             op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'not_ : 'Bool -> 'Bool [prec(53)] .
             op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
             op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
             op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
             none
             eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
             eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_[
    'A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
             eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
             eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
             eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_[
    'A:Bool,'B:Bool]]] [none] .
             eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_[
    'A:Bool,'B:Bool]] [none] .
             eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
             eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
             eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
           endfm ;
           (none).OpDeclSet ;
           emptyModuleNameSet ;
           emptyViewExpSet
        >, '#UP# . 'ACCOUNT . 'CHANGE-NAME . 'FOO . 'MY-ACCOUNT . 'MY-NAT, 
        < 'Bool ;
           'view_from_to_is_endv['token[''Bool.Qid],'token[''TRIV.Qid],'token[
    ''BOOL.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Bool.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'DEFAULT ;
           'view_from_to_is_endv['token[''DEFAULT.Qid],'token[''TRIV.Qid],
    'token[''DEFAULT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Elt.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Float ;
           'view_from_to_is_endv['token[''Float.Qid],'token[''TRIV.Qid],'token[
    ''FLOAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Float.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Float0 ;
           'view_from_to_is_endv['token[''Float0.Qid],'token[''DEFAULT.Qid],
    'token[''FLOAT.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Float.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''0.0.Qid]]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Float< ;
           'view_from_to_is_endv['token[''Float<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Float<= ;
           'view_from_to_is_endv['token[''Float<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''FLOAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Float.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Int ;
           'view_from_to_is_endv['token[''Int.Qid],'token[''TRIV.Qid],'token[
    ''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Int0 ;
           'view_from_to_is_endv['token[''Int0.Qid],'token[''DEFAULT.Qid],
    'token[''INT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Int.Qid]]]
    ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Int< ;
           'view_from_to_is_endv['token[''Int<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Int<= ;
           'view_from_to_is_endv['token[''Int<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''INT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Int.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Nat ;
           'view_from_to_is_endv['token[''Nat.Qid],'token[''TRIV.Qid],'token[
    ''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Nat0 ;
           'view_from_to_is_endv['token[''Nat0.Qid],'token[''DEFAULT.Qid],
    'token[''NAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Nat.Qid]]]
    ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Nat< ;
           'view_from_to_is_endv['token[''Nat<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Nat<= ;
           'view_from_to_is_endv['token[''Nat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''NAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Nat.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Qid ;
           'view_from_to_is_endv['token[''Qid.Qid],'token[''TRIV.Qid],'token[
    ''QID.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Qid.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Qid0 ;
           'view_from_to_is_endv['token[''Qid0.Qid],'token[''DEFAULT.Qid],
    'token[''QID.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''Qid.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble['''.Qid]]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Rat ;
           'view_from_to_is_endv['token[''Rat.Qid],'token[''TRIV.Qid],'token[
    ''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Rat0 ;
           'view_from_to_is_endv['token[''Rat0.Qid],'token[''DEFAULT.Qid],
    'token[''RAT.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Rat.Qid]]]
    ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Rat< ;
           'view_from_to_is_endv['token[''Rat<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'Rat<= ;
           'view_from_to_is_endv['token[''Rat<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''RAT.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Rat.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'STRICT-TOTAL-ORDER ;
           'view_from_to_is_endv['token[''STRICT-TOTAL-ORDER.Qid],'token[
    ''STRICT-WEAK-ORDER.Qid],'token[''STRICT-TOTAL-ORDER.Qid],'sort_to_.[
    'sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'STRICT-WEAK-ORDER ;
           'view_from_to_is_endv['token[''STRICT-WEAK-ORDER.Qid],'token[
    ''TRIV.Qid],'token[''STRICT-WEAK-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'String ;
           'view_from_to_is_endv['token[''String.Qid],'token[''TRIV.Qid],
    'token[''STRING.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''String.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'String0 ;
           'view_from_to_is_endv['token[''String0.Qid],'token[''DEFAULT.Qid],
    'token[''STRING.Qid],'__['sort_to_.['sortToken[''Elt.Qid],'sortToken[
    ''String.Qid]],'op_to`term_.['bubble[''0.Qid],'bubble[''"".Qid]]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'String< ;
           'view_from_to_is_endv['token[''String<.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'String<= ;
           'view_from_to_is_endv['token[''String<=.Qid],'token[
    ''STRICT-TOTAL-ORDER.Qid],'token[''STRING.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''String.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'TOTAL-ORDER ;
           'view_from_to_is_endv['token[''TOTAL-ORDER.Qid],'token[
    ''TOTAL-PREORDER.Qid],'token[''TOTAL-ORDER.Qid],'sort_to_.['sortToken[
    ''Elt.Qid],'sortToken[''Elt.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'TOTAL-PREORDER ;
           'view_from_to_is_endv['token[''TOTAL-PREORDER.Qid],'token[
    ''TRIV.Qid],'token[''TOTAL-PREORDER.Qid],'sort_to_.['sortToken[''Elt.Qid],
    'sortToken[''Elt.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        > 
        < 'TRIV ;
           'view_from_to_is_endv['token[''TRIV.Qid],'token[''TRIV.Qid],'token[
    ''TRIV.Qid],'sort_to_.['sortToken[''Elt.Qid],'sortToken[''Elt.Qid]]] ;
           (null).View ;
           emptyModuleNameSet ;
           emptyViewExpSet
        >, 'Bool # 'DEFAULT # 'Float # 'Float0 # 'Float< # 'Float<= # 'Int #
    'Int0 # 'Int< # 'Int<= # 'Nat # 'Nat0 # 'Nat< # 'Nat<= # 'Qid # 'Qid0 #
    'Rat # 'Rat0 # 'Rat< # 'Rat<= # 'STRICT-TOTAL-ORDER # 'STRICT-WEAK-ORDER #
    'String # 'String0 # 'String< # 'String<= # 'TOTAL-ORDER # 'TOTAL-PREORDER
    # 'TRIV, emptyModuleNameSet, emptyModuleNameSet, 'BOOL, nil)) fi
rewrites: 218 in 152ms cpu (3843ms real) (1427 rewrites/second)
Error: no parsing for a


Maude> 