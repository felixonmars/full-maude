***
*** Hanoi Tower puzzle
*** (running example of the "Strategy Language" chapter of the manual)
***

(mod HANOI is
  protecting NAT-LIST .

  sorts Post Hanoi Game .
  subsort Post < Hanoi .

  op `(_`)`[_`] : Nat NatList -> Post [ctor] .
  op empty   : -> Hanoi [ctor] .
  op __      : Hanoi Hanoi -> Hanoi [ctor assoc comm id: empty] .

  vars S T D1 D2 N : Nat .
  vars L1 L2       : NatList .
  vars H H'        : Hanoi .

  crl [move] : (S) [L1 D1] (T) [L2 D2] => (S) [L1] (T) [L2 D2 D1] if D2 > D1 .
  rl  [move] : (S) [L1 D1] (T) [nil]   => (S) [L1] (T) [D1] .
endm)

***(
Maude> (srew [3] in HANOI : (0)[3 2 1] (1)[nil] (2)[nil] using move .)
srewrite [3] in HANOI :(0)[3 2 1](1)[nil](2)[nil] using move .

Solution 1
result Hanoi :
  (0)[3 2](1)[1](2)[nil]

Solution 2
result Hanoi :
  (0)[3 2](1)[nil](2)[1]

No more solutions.

Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using move[T <- 2] .)
srewrite in HANOI :(0)[3 2 1](1)[nil](2)[nil] using move[T:Nat <- 2].

Solution 1
result Hanoi :
  (0)[3 2](1)[nil](2)[1]

No more solutions.
)

(mod HANOI-COUNT is
  protecting HANOI .

  op <_`,_> : Hanoi Nat -> Game [ctor] .

  vars H H' : Hanoi .
  var  N : Nat .

 crl [step] : < H, N > => < H', s N > if H => H' .
  rl [cancel] : N => 0 [nonexec] .
  rl [inc] : N => s N [nonexec] .
endm)

***(
Maude> (srew < (0)[3 2 1] (1)[nil] (2)[nil], 0 > using step{all} .)
srewrite in HANOI-COUNT : <(0)[3 2 1](1)[nil](2)[nil],0 > using step{all}.

Solution 1
result Game :
  <(0)[3 2](1)[1](2)[nil],1 >

Solution 2
result Game :
  <(0)[3 2](1)[nil](2)[1],1 >

No more solutions.

Maude> (srew 1 using cancel .)
srewrite in HANOI-COUNT : 1 using cancel .

Solution 1
result Zero :
  0

Solution 2
result NzNat :
  1

No more solutions.

Maude> (srew 1 using top(cancel) .)
srewrite in HANOI-COUNT : 1 using top(cancel).

Solution 1
result Zero :
  0

No more solutions.

Maude> (srew (0)[nil] (1)[nil] (2)[3 2 1] using match (N)[3 2 1] H s.t. N =/= 0 .)
srewrite in HANOI-COUNT :(0)[nil](1)[nil](2)[3 2 1] using match H:Hanoi(N:Nat)[3 2 1]s.t. N:Nat =/= 0 = true .

Solution 1
result Hanoi :
  (0)[nil](1)[nil](2)[3 2 1]

No more solutions.

Maude> (srew (0)[nil] (1)[nil] (2)[3 2 1] using xmatch (0)[nil] (2)[3 2 1] .)
srewrite in HANOI-COUNT :(0)[nil](1)[nil](2)[3 2 1] using xmatch(0)[nil](2)[3 2 1].

Solution 1
result Hanoi :
  (0)[nil](1)[nil](2)[3 2 1]

No more solutions.

Maude> (srew (0)[nil] (1)[nil] (2)[3 2 1] using match (0)[nil] (2)[3 2 1] .)
srewrite in HANOI-COUNT :(0)[nil](1)[nil](2)[3 2 1] using match(0)[nil](2)[3 2 1].

No solution.
)
(srew in HANOI : (0)[nil] (1)[nil] (2)[3 2 1] using amatch 3 L1:NatList 1 .)
***(
Maude> (srew in HANOI : (0)[nil] (1)[nil] (2)[3 2 1] using amatch 3 L1 1 .)
Error: Incorrect input
Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using move ; move .)
srewrite in HANOI-COUNT :(0)[3 2 1](1)[nil](2)[nil] using move ; move .

Solution 1
result Hanoi :
  (0)[3](1)[1](2)[2]

Solution 2
result Hanoi :
  (0)[3 2](1)[nil](2)[1]

Solution 3
result Hanoi :
  (0)[3](1)[2](2)[1]

Solution 4
result Hanoi :
  (0)[3 2](1)[1](2)[nil]

Solution 5
result Hanoi :
  (0)[3 2 1](1)[nil](2)[nil]

No more solutions.
)
(srew (0)[3 2] (1)[1] (2)[nil] using move[S <- 0] | move[T <- 0] .)
***(
Maude> (srew (0)[3 2] (1)[1] (2)[nil] using move[S <- 0] | move[T <- 0] .)
Error: Incorrect input
Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using move * .)
srewrite in HANOI-COUNT :(0)[3 2 1](1)[nil](2)[nil] using move * .

Solution 1
result Hanoi :
  (0)[3 2 1](1)[nil](2)[nil]

Solution 2
result Hanoi :
  (0)[3 2](1)[1](2)[nil]

Solution 3
result Hanoi :
  (0)[3 2](1)[nil](2)[1]

Solution 4
result Hanoi :
  (0)[3](1)[1](2)[2]

Solution 5
result Hanoi :
  (0)[3](1)[2](2)[1]

Solution 6
result Hanoi :
  (0)[3 1](1)[nil](2)[2]

Solution 7
result Hanoi :
  (0)[3](1)[nil](2)[2 1]

Solution 8
result Hanoi :
  (0)[3 1](1)[2](2)[nil]

Solution 9
result Hanoi :
  (0)[nil](1)[3](2)[2 1]

Solution 10
result Hanoi :
  (0)[3](1)[2 1](2)[nil]

Solution 11
result Hanoi :
  (0)[nil](1)[2 1](2)[3]

Solution 12
result Hanoi :
  (0)[1](1)[3](2)[2]

Solution 13
result Hanoi :
  (0)[nil](1)[3 1](2)[2]

Solution 14
result Hanoi :
  (0)[1](1)[2](2)[3]

Solution 15
result Hanoi :
  (0)[nil](1)[2](2)[3 1]

Solution 16
result Hanoi :
  (0)[2](1)[3 1](2)[nil]

Solution 17
result Hanoi :
  (0)[2](1)[nil](2)[3 1]

Solution 18
result Hanoi :
  (0)[1](1)[3 2](2)[nil]

Solution 19
result Hanoi :
  (0)[1](1)[nil](2)[3 2]

Solution 20
result Hanoi :
  (0)[2](1)[3](2)[1]

Solution 21
result Hanoi :
  (0)[nil](1)[3 2](2)[1]

Solution 22
result Hanoi :
  (0)[nil](1)[1](2)[3 2]

Solution 23
result Hanoi :
  (0)[2](1)[1](2)[3]

Solution 24
result Hanoi :
  (0)[2 1](1)[3](2)[nil]

Solution 25
result Hanoi :
  (0)[nil](1)[3 2 1](2)[nil]

Solution 26
result Hanoi :
  (0)[nil](1)[nil](2)[3 2 1]

Solution 27
result Hanoi :
  (0)[2 1](1)[nil](2)[3]

No more solutions.

Maude> (srew (0)[3 2 1] using idle .)
srewrite in HANOI-COUNT :(0)[3 2 1] using idle .

Solution 1
result Post :
  (0)[3 2 1]

No more solutions.

Maude> (srew (0)[3 2 1] using fail .)
srewrite in HANOI-COUNT :(0)[3 2 1] using fail .

No solution.
)
(srew in HANOI : (0)[3 2] (1)[1] (2)[nil] using (move[T <- 2] ? idle : move) * .)
***(
Maude> (srew in HANOI : (0)[3 2] (1)[1] (2)[nil] using (move[T <- 2] ? idle : move) * .)
Error: Incorrect input
)
(srew (0)[3 2 1] (1)[nil] (2)[nil] using move[S <- 0] ! .)
***(
Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using move[S <- 0] ! .)
Error: Incorrect input
)
(srew (0)[3] (1)[1] (2)[2] using test(move[S <- 0]) .)
***(
Maude> (srew (0)[3] (1)[1] (2)[2] using test(move[S <- 0]) .)
Error: Incorrect input
)
(srew (0)[3] (1)[1] (2)[2] using test(move[S <- 1]) .)
***(
Maude> (srew (0)[3] (1)[1] (2)[2] using test(move[S <- 1]) .)
Error: Incorrect input
Maude> (srew [1] in HANOI-COUNT : < (0)[3 2 1] (1) [nil] (2)[nil], 0 >
>           using (matchrew < H, N > by H using move, N using top(inc)) * ;
>             amatch (2)[3 2 1] .)
srewrite [1] in HANOI-COUNT : <(0)[3 2 1](1)[nil](2)[nil],0 > using(matchrew < H:Hanoi,N:Nat > by H:Hanoi using move,N:Nat using top(inc))* ; amatch(2)[3 2 1].

Solution 1
result Game :
  <(0)[nil](1)[nil](2)[3 2 1],7 >


Maude> (srew 1 using inc .)
srewrite in HANOI-COUNT : 1 using inc .

Solution 1
result NzNat :
  2

No more solutions.

Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using one(move * ; amatch (2)[3 2 1]) .)
srewrite in HANOI-COUNT :(0)[3 2 1](1)[nil](2)[nil] using one(move * ; amatch(2)[3 2 1]).

Solution 1
result Hanoi :
  (0)[nil](1)[nil](2)[3 2 1]

No more solutions.

Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using move * ; amatch (2)[3 2 1] .)
srewrite in HANOI-COUNT :(0)[3 2 1](1)[nil](2)[nil] using move * ; amatch(2)[3 2 1].

Solution 1
result Hanoi :
  (0)[nil](1)[nil](2)[3 2 1]

No more solutions.

Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using one(move) * .)
srewrite in HANOI-COUNT :(0)[3 2 1](1)[nil](2)[nil] using one(move)* .

Solution 1
result Hanoi :
  (0)[3 2 1](1)[nil](2)[nil]

Solution 2
result Hanoi :
  (0)[3 2](1)[1](2)[nil]

Solution 3
result Hanoi :
  (0)[3](1)[1](2)[2]

Solution 4
result Hanoi :
  (0)[3 1](1)[nil](2)[2]

No more solutions.
)

(fmod HANOI-AUX is
  protecting SET{Nat} .

  op third : Nat Nat ~> Nat .

  vars N M K : Nat .

  ceq third(N, M) = K if N, M, K := 0, 1, 2 .
endfm)

(smod HANOI-SOLVE is
  protecting HANOI .
  protecting HANOI-AUX .

  strat moveAll : Nat Nat Nat @ Hanoi .

  vars S T C M : Nat .

  sd moveAll(S, S, C) := idle .
  sd moveAll(S, T, 0) := idle .
  sd moveAll(S, T, s(C)) := moveAll(S, third(S, T), C) ;
                            move[S <- S, T <- T] ;
                            moveAll(third(S, T), T, C) .
endsm)

***(
Maude> (srew (0)[3 2 1] (1)[nil] (2)[nil] using moveAll(0, 2, 3) .)
srewrite in HANOI-SOLVE :(0)[3 2 1](1)[nil](2)[nil] using moveAll(0,2,3).

Solution 1
result Hanoi :
  (0)[nil](1)[nil](2)[3 2 1]

No more solutions.
)
