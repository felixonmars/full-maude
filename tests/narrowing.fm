  mod NAT-NARROWING is
    sort Nat .
    op 0 : -> Nat [ctor] .
    op s : Nat -> Nat [ctor] .
    op _+_ : Nat Nat -> Nat .
    vars X Y : Nat .
    rl [base] : 0 + Y => Y .
    rl [ind] : s(X) + Y => s(X + Y) .
  endm

select FULL-MAUDE .
loop init .

---- changed: colons added to eqs

 (mod EXCLUSIVE-OR-NOT-COHERENT is 
    sorts Nat NatSet .
    op 0 : -> Nat [ctor] .
    op s : Nat -> Nat [ctor] .
    
    subsort Nat < NatSet .
    op mt : -> NatSet .
    op _*_ : NatSet NatSet -> NatSet [ctor assoc comm] .

    vars X Y Z : [NatSet] .
    eq [idem] : X * X = mt   [variant] .
    eq [id]   : X * mt = X   [variant] .
  endm)

(ax coherence completion .)

(reduce in AX-COHERENCE-COMPLETION : 
            axCohComplete(upModule(EXCLUSIVE-OR-NOT-COHERENT)) .)

  mod EXCLUSIVE-OR-NOT-COHERENT is 
    sorts Nat NatSet .
    op 0 : -> Nat [ctor] .
    op s : Nat -> Nat [ctor] .
    
    subsort Nat < NatSet .
    op mt : -> NatSet .
    op _*_ : NatSet NatSet -> NatSet [ctor assoc comm] .

    vars X Y Z : [NatSet] .
    eq [idem] : X * X = mt   [variant] .
    eq [id]   : X * mt = X   [variant] .
  endm
  
reduce in AX-COHERENCE-COMPLETION : 
            axCohComplete(upModule('EXCLUSIVE-OR-NOT-COHERENT, false)) .

 mod NARROWING-VENDING-MACHINE is 
   sorts Coin Item Marking Money State . 
   subsort Coin < Money .
   op empty : -> Money .
   op __ : Money Money -> Money [assoc comm id: empty] . 
   subsort Money Item < Marking . 
   op __ : Marking Marking -> Marking [assoc comm id: empty] . 
   op <_> : Marking -> State .
   ops $ q : -> Coin . 
   ops a c : -> Item . 
   var M : Marking .
   rl [buy-c] : < M $ > => < M c > . 
   rl [buy-a] : < M $ > => < M a q > . 
   eq [change] : q q q q = $ [variant] . 
 endm

select FULL-MAUDE .
loop init .

(search [1] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>* < a c > .)

(search [,5] in NARROWING-VENDING-MACHINE :
            < M:Money > ~>* < a c > .)

(search [,5] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>! < a c > .)

(search [,5] in NARROWING-VENDING-MACHINE : 
            < C1:Coin C2:Coin C3:Coin C4:Coin > ~>! < M:Money a c > .)

 (mod LAST-APPEND is
    sort Success .
    op success : -> Success .
    sort Nat .
    op 0 : -> Nat .
    op s : Nat -> Nat .
    sort NatList .
    op nil : -> NatList .
    op _:_ : Nat NatList -> NatList .

    vars XS YS : NatList .  
    vars N M X Y : Nat .
    op append : NatList NatList -> [NatList] .
    rl append(nil, YS) => YS .
    rl append(N : XS, YS) => N : append(XS, YS) .

    op last : NatList -> [Nat] .
    rl last(XS) => append(YS, N : nil) =:= XS >> N [nonexec] .

    op _>>_ : [Success] [Nat] -> [Nat] [frozen (2) strat (1 0)] .
    eq success >> X:[Nat] = X:[Nat] .

    op _=:=_ : Nat Nat -> [Success] [comm] .
    rl N =:= N => success .

    op _=:=_ : NatList NatList -> [Success] [comm] .
    rl XS =:= XS => success .
  endm)

(search [1] in LAST-APPEND : last(0 : s(0) : nil) ~>! Z:Nat .)

 (mod MEMBERSHIP is
    protecting LAST-APPEND .
    vars XS YS ZS : NatList .
    vars N M X Y : Nat .
    op member : Nat NatList -> [Success] .
    rl member(N,XS) => append(YS, N : ZS) =:= XS [nonexec] .
  endm)

 (search [1] in MEMBERSHIP : 
            member(s(0),0 : s(0): nil) ~>! success .)

 (search [,5] in MEMBERSHIP : 
            member(N:Nat,0 : s(0): nil) ~>! success .)

 (search [1] in NARROWING-VENDING-MACHINE : 
            < M:Money > ~>* < a c > .)

---- acuCohComplete -> axCohComplete
 (reduce in META-NARROWING-SEARCH :
            metaNarrowSearch(axCohComplete(upModule(NARROWING-VENDING-MACHINE)),
              '<_>['M:Money],
              '<_>['__['a.Item, 'c.Item]],
              none, '*, unbounded, 1, unbounded) .)

---- acuCohComplete -> axCohComplete
 (reduce in META-NARROWING-SEARCH :
            metaNarrowSearchPath(axCohComplete(upModule(NARROWING-VENDING-MACHINE)),
              '<_>['M:Money],
              '<_>['__['a.Item, 'c.Item]],
              none, '*, unbounded, 1, unbounded) .)

 (mod NARROWING-VM-NOTOP is 
    sorts Coin Item Marking Money State . 
    subsort Coin < Money .
    op empty : -> Money .
    op __ : Money Money -> Money [assoc comm id: empty] . 
    subsort Money Item < Marking . 
    op __ : Marking Marking -> Marking [assoc comm id: empty] . 
    subsort Marking < State .
    ops $ q : -> Coin . ops a c : -> Item . 
    var M : Marking .
    rl [buy-c] : $ => c . 
    rl [buy-a] : $ => a q . 
    eq [change]: q q q q M = $ M [variant] . 
  endm)

 (mod NARROWING-VM-NOTOP-COHERENT is 
    sorts Coin Item Marking Money State . subsort Coin < Money .
    op empty : -> Money .
    op __ : Money Money -> Money [assoc comm id: empty] . 
    subsort Money Item < Marking . 
    op __ : Marking Marking -> Marking [assoc comm id: empty] . 
    subsort Marking < State .
    ops $ q : -> Coin . ops a c : -> Item . var M : Marking .
    rl [buy-c] : M $ => M c . 
    rl [buy-a] : M $ => M a q . 
    eq [change]: q q q q M = $ M [variant] . 
  endm)

 (red in META-NARROWING-SEARCH :
            metaParamodulationSearch(
              upModule(NARROWING-VM-NOTOP-COHERENT),
              'M:Money,
              '__['a.Item, 'c.Item],
              none, '*, 1, unbounded, unbounded) .)
 

